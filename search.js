window.pdocSearch = (function(){
/** elasticlunr - http://weixsong.github.io * Copyright (C) 2017 Oliver Nightingale * Copyright (C) 2017 Wei Song * MIT Licensed */!function(){function e(e){if(null===e||"object"!=typeof e)return e;var t=e.constructor();for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}var t=function(e){var n=new t.Index;return n.pipeline.add(t.trimmer,t.stopWordFilter,t.stemmer),e&&e.call(n,n),n};t.version="0.9.5",lunr=t,t.utils={},t.utils.warn=function(e){return function(t){e.console&&console.warn&&console.warn(t)}}(this),t.utils.toString=function(e){return void 0===e||null===e?"":e.toString()},t.EventEmitter=function(){this.events={}},t.EventEmitter.prototype.addListener=function(){var e=Array.prototype.slice.call(arguments),t=e.pop(),n=e;if("function"!=typeof t)throw new TypeError("last argument must be a function");n.forEach(function(e){this.hasHandler(e)||(this.events[e]=[]),this.events[e].push(t)},this)},t.EventEmitter.prototype.removeListener=function(e,t){if(this.hasHandler(e)){var n=this.events[e].indexOf(t);-1!==n&&(this.events[e].splice(n,1),0==this.events[e].length&&delete this.events[e])}},t.EventEmitter.prototype.emit=function(e){if(this.hasHandler(e)){var t=Array.prototype.slice.call(arguments,1);this.events[e].forEach(function(e){e.apply(void 0,t)},this)}},t.EventEmitter.prototype.hasHandler=function(e){return e in this.events},t.tokenizer=function(e){if(!arguments.length||null===e||void 0===e)return[];if(Array.isArray(e)){var n=e.filter(function(e){return null===e||void 0===e?!1:!0});n=n.map(function(e){return t.utils.toString(e).toLowerCase()});var i=[];return n.forEach(function(e){var n=e.split(t.tokenizer.seperator);i=i.concat(n)},this),i}return e.toString().trim().toLowerCase().split(t.tokenizer.seperator)},t.tokenizer.defaultSeperator=/[\s\-]+/,t.tokenizer.seperator=t.tokenizer.defaultSeperator,t.tokenizer.setSeperator=function(e){null!==e&&void 0!==e&&"object"==typeof e&&(t.tokenizer.seperator=e)},t.tokenizer.resetSeperator=function(){t.tokenizer.seperator=t.tokenizer.defaultSeperator},t.tokenizer.getSeperator=function(){return t.tokenizer.seperator},t.Pipeline=function(){this._queue=[]},t.Pipeline.registeredFunctions={},t.Pipeline.registerFunction=function(e,n){n in t.Pipeline.registeredFunctions&&t.utils.warn("Overwriting existing registered function: "+n),e.label=n,t.Pipeline.registeredFunctions[n]=e},t.Pipeline.getRegisteredFunction=function(e){return e in t.Pipeline.registeredFunctions!=!0?null:t.Pipeline.registeredFunctions[e]},t.Pipeline.warnIfFunctionNotRegistered=function(e){var n=e.label&&e.label in this.registeredFunctions;n||t.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n",e)},t.Pipeline.load=function(e){var n=new t.Pipeline;return e.forEach(function(e){var i=t.Pipeline.getRegisteredFunction(e);if(!i)throw new Error("Cannot load un-registered function: "+e);n.add(i)}),n},t.Pipeline.prototype.add=function(){var e=Array.prototype.slice.call(arguments);e.forEach(function(e){t.Pipeline.warnIfFunctionNotRegistered(e),this._queue.push(e)},this)},t.Pipeline.prototype.after=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i+1,0,n)},t.Pipeline.prototype.before=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i,0,n)},t.Pipeline.prototype.remove=function(e){var t=this._queue.indexOf(e);-1!==t&&this._queue.splice(t,1)},t.Pipeline.prototype.run=function(e){for(var t=[],n=e.length,i=this._queue.length,o=0;n>o;o++){for(var r=e[o],s=0;i>s&&(r=this._queue[s](r,o,e),void 0!==r&&null!==r);s++);void 0!==r&&null!==r&&t.push(r)}return t},t.Pipeline.prototype.reset=function(){this._queue=[]},t.Pipeline.prototype.get=function(){return this._queue},t.Pipeline.prototype.toJSON=function(){return this._queue.map(function(e){return t.Pipeline.warnIfFunctionNotRegistered(e),e.label})},t.Index=function(){this._fields=[],this._ref="id",this.pipeline=new t.Pipeline,this.documentStore=new t.DocumentStore,this.index={},this.eventEmitter=new t.EventEmitter,this._idfCache={},this.on("add","remove","update",function(){this._idfCache={}}.bind(this))},t.Index.prototype.on=function(){var e=Array.prototype.slice.call(arguments);return this.eventEmitter.addListener.apply(this.eventEmitter,e)},t.Index.prototype.off=function(e,t){return this.eventEmitter.removeListener(e,t)},t.Index.load=function(e){e.version!==t.version&&t.utils.warn("version mismatch: current "+t.version+" importing "+e.version);var n=new this;n._fields=e.fields,n._ref=e.ref,n.documentStore=t.DocumentStore.load(e.documentStore),n.pipeline=t.Pipeline.load(e.pipeline),n.index={};for(var i in e.index)n.index[i]=t.InvertedIndex.load(e.index[i]);return n},t.Index.prototype.addField=function(e){return this._fields.push(e),this.index[e]=new t.InvertedIndex,this},t.Index.prototype.setRef=function(e){return this._ref=e,this},t.Index.prototype.saveDocument=function(e){return this.documentStore=new t.DocumentStore(e),this},t.Index.prototype.addDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.addDoc(i,e),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));this.documentStore.addFieldLength(i,n,o.length);var r={};o.forEach(function(e){e in r?r[e]+=1:r[e]=1},this);for(var s in r){var u=r[s];u=Math.sqrt(u),this.index[n].addToken(s,{ref:i,tf:u})}},this),n&&this.eventEmitter.emit("add",e,this)}},t.Index.prototype.removeDocByRef=function(e){if(e&&this.documentStore.isDocStored()!==!1&&this.documentStore.hasDoc(e)){var t=this.documentStore.getDoc(e);this.removeDoc(t,!1)}},t.Index.prototype.removeDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.hasDoc(i)&&(this.documentStore.removeDoc(i),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));o.forEach(function(e){this.index[n].removeToken(e,i)},this)},this),n&&this.eventEmitter.emit("remove",e,this))}},t.Index.prototype.updateDoc=function(e,t){var t=void 0===t?!0:t;this.removeDocByRef(e[this._ref],!1),this.addDoc(e,!1),t&&this.eventEmitter.emit("update",e,this)},t.Index.prototype.idf=function(e,t){var n="@"+t+"/"+e;if(Object.prototype.hasOwnProperty.call(this._idfCache,n))return this._idfCache[n];var i=this.index[t].getDocFreq(e),o=1+Math.log(this.documentStore.length/(i+1));return this._idfCache[n]=o,o},t.Index.prototype.getFields=function(){return this._fields.slice()},t.Index.prototype.search=function(e,n){if(!e)return[];e="string"==typeof e?{any:e}:JSON.parse(JSON.stringify(e));var i=null;null!=n&&(i=JSON.stringify(n));for(var o=new t.Configuration(i,this.getFields()).get(),r={},s=Object.keys(e),u=0;u<s.length;u++){var a=s[u];r[a]=this.pipeline.run(t.tokenizer(e[a]))}var l={};for(var c in o){var d=r[c]||r.any;if(d){var f=this.fieldSearch(d,c,o),h=o[c].boost;for(var p in f)f[p]=f[p]*h;for(var p in f)p in l?l[p]+=f[p]:l[p]=f[p]}}var v,g=[];for(var p in l)v={ref:p,score:l[p]},this.documentStore.hasDoc(p)&&(v.doc=this.documentStore.getDoc(p)),g.push(v);return g.sort(function(e,t){return t.score-e.score}),g},t.Index.prototype.fieldSearch=function(e,t,n){var i=n[t].bool,o=n[t].expand,r=n[t].boost,s=null,u={};return 0!==r?(e.forEach(function(e){var n=[e];1==o&&(n=this.index[t].expandToken(e));var r={};n.forEach(function(n){var o=this.index[t].getDocs(n),a=this.idf(n,t);if(s&&"AND"==i){var l={};for(var c in s)c in o&&(l[c]=o[c]);o=l}n==e&&this.fieldSearchStats(u,n,o);for(var c in o){var d=this.index[t].getTermFrequency(n,c),f=this.documentStore.getFieldLength(c,t),h=1;0!=f&&(h=1/Math.sqrt(f));var p=1;n!=e&&(p=.15*(1-(n.length-e.length)/n.length));var v=d*a*h*p;c in r?r[c]+=v:r[c]=v}},this),s=this.mergeScores(s,r,i)},this),s=this.coordNorm(s,u,e.length)):void 0},t.Index.prototype.mergeScores=function(e,t,n){if(!e)return t;if("AND"==n){var i={};for(var o in t)o in e&&(i[o]=e[o]+t[o]);return i}for(var o in t)o in e?e[o]+=t[o]:e[o]=t[o];return e},t.Index.prototype.fieldSearchStats=function(e,t,n){for(var i in n)i in e?e[i].push(t):e[i]=[t]},t.Index.prototype.coordNorm=function(e,t,n){for(var i in e)if(i in t){var o=t[i].length;e[i]=e[i]*o/n}return e},t.Index.prototype.toJSON=function(){var e={};return this._fields.forEach(function(t){e[t]=this.index[t].toJSON()},this),{version:t.version,fields:this._fields,ref:this._ref,documentStore:this.documentStore.toJSON(),index:e,pipeline:this.pipeline.toJSON()}},t.Index.prototype.use=function(e){var t=Array.prototype.slice.call(arguments,1);t.unshift(this),e.apply(this,t)},t.DocumentStore=function(e){this._save=null===e||void 0===e?!0:e,this.docs={},this.docInfo={},this.length=0},t.DocumentStore.load=function(e){var t=new this;return t.length=e.length,t.docs=e.docs,t.docInfo=e.docInfo,t._save=e.save,t},t.DocumentStore.prototype.isDocStored=function(){return this._save},t.DocumentStore.prototype.addDoc=function(t,n){this.hasDoc(t)||this.length++,this.docs[t]=this._save===!0?e(n):null},t.DocumentStore.prototype.getDoc=function(e){return this.hasDoc(e)===!1?null:this.docs[e]},t.DocumentStore.prototype.hasDoc=function(e){return e in this.docs},t.DocumentStore.prototype.removeDoc=function(e){this.hasDoc(e)&&(delete this.docs[e],delete this.docInfo[e],this.length--)},t.DocumentStore.prototype.addFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&(this.docInfo[e]||(this.docInfo[e]={}),this.docInfo[e][t]=n)},t.DocumentStore.prototype.updateFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&this.addFieldLength(e,t,n)},t.DocumentStore.prototype.getFieldLength=function(e,t){return null===e||void 0===e?0:e in this.docs&&t in this.docInfo[e]?this.docInfo[e][t]:0},t.DocumentStore.prototype.toJSON=function(){return{docs:this.docs,docInfo:this.docInfo,length:this.length,save:this._save}},t.stemmer=function(){var e={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},t={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},n="[^aeiou]",i="[aeiouy]",o=n+"[^aeiouy]*",r=i+"[aeiou]*",s="^("+o+")?"+r+o,u="^("+o+")?"+r+o+"("+r+")?$",a="^("+o+")?"+r+o+r+o,l="^("+o+")?"+i,c=new RegExp(s),d=new RegExp(a),f=new RegExp(u),h=new RegExp(l),p=/^(.+?)(ss|i)es$/,v=/^(.+?)([^s])s$/,g=/^(.+?)eed$/,m=/^(.+?)(ed|ing)$/,y=/.$/,S=/(at|bl|iz)$/,x=new RegExp("([^aeiouylsz])\\1$"),w=new RegExp("^"+o+i+"[^aeiouwxy]$"),I=/^(.+?[^aeiou])y$/,b=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,E=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,D=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,F=/^(.+?)(s|t)(ion)$/,_=/^(.+?)e$/,P=/ll$/,k=new RegExp("^"+o+i+"[^aeiouwxy]$"),z=function(n){var i,o,r,s,u,a,l;if(n.length<3)return n;if(r=n.substr(0,1),"y"==r&&(n=r.toUpperCase()+n.substr(1)),s=p,u=v,s.test(n)?n=n.replace(s,"$1$2"):u.test(n)&&(n=n.replace(u,"$1$2")),s=g,u=m,s.test(n)){var z=s.exec(n);s=c,s.test(z[1])&&(s=y,n=n.replace(s,""))}else if(u.test(n)){var z=u.exec(n);i=z[1],u=h,u.test(i)&&(n=i,u=S,a=x,l=w,u.test(n)?n+="e":a.test(n)?(s=y,n=n.replace(s,"")):l.test(n)&&(n+="e"))}if(s=I,s.test(n)){var z=s.exec(n);i=z[1],n=i+"i"}if(s=b,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+e[o])}if(s=E,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+t[o])}if(s=D,u=F,s.test(n)){var z=s.exec(n);i=z[1],s=d,s.test(i)&&(n=i)}else if(u.test(n)){var z=u.exec(n);i=z[1]+z[2],u=d,u.test(i)&&(n=i)}if(s=_,s.test(n)){var z=s.exec(n);i=z[1],s=d,u=f,a=k,(s.test(i)||u.test(i)&&!a.test(i))&&(n=i)}return s=P,u=d,s.test(n)&&u.test(n)&&(s=y,n=n.replace(s,"")),"y"==r&&(n=r.toLowerCase()+n.substr(1)),n};return z}(),t.Pipeline.registerFunction(t.stemmer,"stemmer"),t.stopWordFilter=function(e){return e&&t.stopWordFilter.stopWords[e]!==!0?e:void 0},t.clearStopWords=function(){t.stopWordFilter.stopWords={}},t.addStopWords=function(e){null!=e&&Array.isArray(e)!==!1&&e.forEach(function(e){t.stopWordFilter.stopWords[e]=!0},this)},t.resetStopWords=function(){t.stopWordFilter.stopWords=t.defaultStopWords},t.defaultStopWords={"":!0,a:!0,able:!0,about:!0,across:!0,after:!0,all:!0,almost:!0,also:!0,am:!0,among:!0,an:!0,and:!0,any:!0,are:!0,as:!0,at:!0,be:!0,because:!0,been:!0,but:!0,by:!0,can:!0,cannot:!0,could:!0,dear:!0,did:!0,"do":!0,does:!0,either:!0,"else":!0,ever:!0,every:!0,"for":!0,from:!0,get:!0,got:!0,had:!0,has:!0,have:!0,he:!0,her:!0,hers:!0,him:!0,his:!0,how:!0,however:!0,i:!0,"if":!0,"in":!0,into:!0,is:!0,it:!0,its:!0,just:!0,least:!0,let:!0,like:!0,likely:!0,may:!0,me:!0,might:!0,most:!0,must:!0,my:!0,neither:!0,no:!0,nor:!0,not:!0,of:!0,off:!0,often:!0,on:!0,only:!0,or:!0,other:!0,our:!0,own:!0,rather:!0,said:!0,say:!0,says:!0,she:!0,should:!0,since:!0,so:!0,some:!0,than:!0,that:!0,the:!0,their:!0,them:!0,then:!0,there:!0,these:!0,they:!0,"this":!0,tis:!0,to:!0,too:!0,twas:!0,us:!0,wants:!0,was:!0,we:!0,were:!0,what:!0,when:!0,where:!0,which:!0,"while":!0,who:!0,whom:!0,why:!0,will:!0,"with":!0,would:!0,yet:!0,you:!0,your:!0},t.stopWordFilter.stopWords=t.defaultStopWords,t.Pipeline.registerFunction(t.stopWordFilter,"stopWordFilter"),t.trimmer=function(e){if(null===e||void 0===e)throw new Error("token should not be undefined");return e.replace(/^\W+/,"").replace(/\W+$/,"")},t.Pipeline.registerFunction(t.trimmer,"trimmer"),t.InvertedIndex=function(){this.root={docs:{},df:0}},t.InvertedIndex.load=function(e){var t=new this;return t.root=e.root,t},t.InvertedIndex.prototype.addToken=function(e,t,n){for(var n=n||this.root,i=0;i<=e.length-1;){var o=e[i];o in n||(n[o]={docs:{},df:0}),i+=1,n=n[o]}var r=t.ref;n.docs[r]?n.docs[r]={tf:t.tf}:(n.docs[r]={tf:t.tf},n.df+=1)},t.InvertedIndex.prototype.hasToken=function(e){if(!e)return!1;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return!1;t=t[e[n]]}return!0},t.InvertedIndex.prototype.getNode=function(e){if(!e)return null;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return null;t=t[e[n]]}return t},t.InvertedIndex.prototype.getDocs=function(e){var t=this.getNode(e);return null==t?{}:t.docs},t.InvertedIndex.prototype.getTermFrequency=function(e,t){var n=this.getNode(e);return null==n?0:t in n.docs?n.docs[t].tf:0},t.InvertedIndex.prototype.getDocFreq=function(e){var t=this.getNode(e);return null==t?0:t.df},t.InvertedIndex.prototype.removeToken=function(e,t){if(e){var n=this.getNode(e);null!=n&&t in n.docs&&(delete n.docs[t],n.df-=1)}},t.InvertedIndex.prototype.expandToken=function(e,t,n){if(null==e||""==e)return[];var t=t||[];if(void 0==n&&(n=this.getNode(e),null==n))return t;n.df>0&&t.push(e);for(var i in n)"docs"!==i&&"df"!==i&&this.expandToken(e+i,t,n[i]);return t},t.InvertedIndex.prototype.toJSON=function(){return{root:this.root}},t.Configuration=function(e,n){var e=e||"";if(void 0==n||null==n)throw new Error("fields should not be null");this.config={};var i;try{i=JSON.parse(e),this.buildUserConfig(i,n)}catch(o){t.utils.warn("user configuration parse failed, will use default configuration"),this.buildDefaultConfig(n)}},t.Configuration.prototype.buildDefaultConfig=function(e){this.reset(),e.forEach(function(e){this.config[e]={boost:1,bool:"OR",expand:!1}},this)},t.Configuration.prototype.buildUserConfig=function(e,n){var i="OR",o=!1;if(this.reset(),"bool"in e&&(i=e.bool||i),"expand"in e&&(o=e.expand||o),"fields"in e)for(var r in e.fields)if(n.indexOf(r)>-1){var s=e.fields[r],u=o;void 0!=s.expand&&(u=s.expand),this.config[r]={boost:s.boost||0===s.boost?s.boost:1,bool:s.bool||i,expand:u}}else t.utils.warn("field name in user configuration not found in index instance fields");else this.addAllFields2UserConfig(i,o,n)},t.Configuration.prototype.addAllFields2UserConfig=function(e,t,n){n.forEach(function(n){this.config[n]={boost:1,bool:e,expand:t}},this)},t.Configuration.prototype.get=function(){return this.config},t.Configuration.prototype.reset=function(){this.config={}},lunr.SortedSet=function(){this.length=0,this.elements=[]},lunr.SortedSet.load=function(e){var t=new this;return t.elements=e,t.length=e.length,t},lunr.SortedSet.prototype.add=function(){var e,t;for(e=0;e<arguments.length;e++)t=arguments[e],~this.indexOf(t)||this.elements.splice(this.locationFor(t),0,t);this.length=this.elements.length},lunr.SortedSet.prototype.toArray=function(){return this.elements.slice()},lunr.SortedSet.prototype.map=function(e,t){return this.elements.map(e,t)},lunr.SortedSet.prototype.forEach=function(e,t){return this.elements.forEach(e,t)},lunr.SortedSet.prototype.indexOf=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;){if(r===e)return o;e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o]}return r===e?o:-1},lunr.SortedSet.prototype.locationFor=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;)e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o];return r>e?o:e>r?o+1:void 0},lunr.SortedSet.prototype.intersect=function(e){for(var t=new lunr.SortedSet,n=0,i=0,o=this.length,r=e.length,s=this.elements,u=e.elements;;){if(n>o-1||i>r-1)break;s[n]!==u[i]?s[n]<u[i]?n++:s[n]>u[i]&&i++:(t.add(s[n]),n++,i++)}return t},lunr.SortedSet.prototype.clone=function(){var e=new lunr.SortedSet;return e.elements=this.toArray(),e.length=e.elements.length,e},lunr.SortedSet.prototype.union=function(e){var t,n,i;this.length>=e.length?(t=this,n=e):(t=e,n=this),i=t.clone();for(var o=0,r=n.toArray();o<r.length;o++)i.add(r[o]);return i},lunr.SortedSet.prototype.toJSON=function(){return this.toArray()},function(e,t){"function"==typeof define&&define.amd?define(t):"object"==typeof exports?module.exports=t():e.elasticlunr=t()}(this,function(){return t})}();
    /** pdoc search index */const docs = [{"fullname": "asmg_workflow", "modulename": "asmg_workflow", "kind": "module", "doc": "<p>workflow is a package for scientific workflow construction.\nTo change the imported API, change the dictionary API_MODULES to have an entry\nDE_API_MODULE[\"code.subpackage.module\"]=True\n in this __init__.py file.</p>\n"}, {"fullname": "asmg_workflow.VERBOSE_IMPORT", "modulename": "asmg_workflow", "qualname": "VERBOSE_IMPORT", "kind": "variable", "doc": "<p></p>\n", "default_value": "False"}, {"fullname": "asmg_workflow.TIMED_IMPORT", "modulename": "asmg_workflow", "qualname": "TIMED_IMPORT", "kind": "variable", "doc": "<p></p>\n", "default_value": "False"}, {"fullname": "asmg_workflow.DE_API_MODULES", "modulename": "asmg_workflow", "qualname": "DE_API_MODULES", "kind": "variable", "doc": "<p>Dictionary that controls the definition of the API, this can be set to leave out any unwanted modules. Also it ispossible to discover all modules by DE_API_MODULES.keys()</p>\n", "default_value": "{&#x27;asmg_workflow.logs&#x27;: True, &#x27;asmg_workflow.tasks&#x27;: True, &#x27;asmg_workflow.workflows&#x27;: True}"}, {"fullname": "asmg_workflow.logs", "modulename": "asmg_workflow.logs", "kind": "module", "doc": "<p>Logs is a module that holds classes and functions for creating and storing a log of events.</p>\n"}, {"fullname": "asmg_workflow.logs.get_filename_iterator", "modulename": "asmg_workflow.logs", "qualname": "get_filename_iterator", "kind": "function", "doc": "<p>Returns the number of files in directory with base_name +1, padded by padding</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">base_name</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">directory</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">extension</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">padding</span><span class=\"o\">=</span><span class=\"mi\">3</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "asmg_workflow.logs.get_mongodb_iterator", "modulename": "asmg_workflow.logs", "qualname": "get_mongodb_iterator", "kind": "function", "doc": "<p>Returns the number of collections in database with base_name +1, padded by padding</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">base_name</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">db_name</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">padding</span><span class=\"o\">=</span><span class=\"mi\">3</span>, </span><span class=\"param\"><span class=\"n\">mongo_url</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "asmg_workflow.logs.auto_name_mongodb", "modulename": "asmg_workflow.logs", "qualname": "auto_name_mongodb", "kind": "function", "doc": "<p>Returns an automatically generated name for a collection in a database</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">specific_descriptor</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">general_descriptor</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">db_name</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">padding</span><span class=\"o\">=</span><span class=\"mi\">3</span>,</span><span class=\"param\">\t<span class=\"n\">mongo_url</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "asmg_workflow.logs.auto_name", "modulename": "asmg_workflow.logs", "qualname": "auto_name", "kind": "function", "doc": "<p>Returns an automatically generated name for a file in a directory</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">specific_descriptor</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">general_descriptor</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">directory</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">extension</span><span class=\"o\">=</span><span class=\"s1\">&#39;json&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">padding</span><span class=\"o\">=</span><span class=\"mi\">3</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "asmg_workflow.logs.get_date", "modulename": "asmg_workflow.logs", "qualname": "get_date", "kind": "function", "doc": "<p>Returns today's date in 'yyyymmdd' format</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "asmg_workflow.logs.split_filename", "modulename": "asmg_workflow.logs", "qualname": "split_filename", "kind": "function", "doc": "<p>Returns a list of file name pieces. The list will contain any CamelCase, snake_case or\ncommon delimiter seperated words (last element is nominally the file extension)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">filename</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "asmg_workflow.logs.change_extension", "modulename": "asmg_workflow.logs", "qualname": "change_extension", "kind": "function", "doc": "<p>Changes the extension of file path to the new one</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">file_path</span>, </span><span class=\"param\"><span class=\"n\">new_extension</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "asmg_workflow.logs.filename_decrement", "modulename": "asmg_workflow.logs", "qualname": "filename_decrement", "kind": "function", "doc": "<p>Takes an autogenerated file name in the form specific_descriptor_general_descriptor_date_iterator and\ndecreases the iterator by 1</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">filename</span>, </span><span class=\"param\"><span class=\"n\">padding</span><span class=\"o\">=</span><span class=\"mi\">3</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "asmg_workflow.logs.filename_increment", "modulename": "asmg_workflow.logs", "qualname": "filename_increment", "kind": "function", "doc": "<p>Takes an autogenerated file name in the form specific_descriptor_general_descriptor_date_iterator and\ndecreases the iterator by 1</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">filename</span>, </span><span class=\"param\"><span class=\"n\">padding</span><span class=\"o\">=</span><span class=\"mi\">3</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "asmg_workflow.logs.Serializer", "modulename": "asmg_workflow.logs", "qualname": "Serializer", "kind": "class", "doc": "<p>Abstract class defining a serializer interface</p>\n"}, {"fullname": "asmg_workflow.logs.Serializer.load", "modulename": "asmg_workflow.logs", "qualname": "Serializer.load", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">file_path</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "asmg_workflow.logs.Serializer.save", "modulename": "asmg_workflow.logs", "qualname": "Serializer.save", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">file_path</span>, </span><span class=\"param\"><span class=\"n\">data</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "asmg_workflow.logs.Serializer.append", "modulename": "asmg_workflow.logs", "qualname": "Serializer.append", "kind": "function", "doc": "<p>For data types that have an append, otherwise is just defaulted to the save function</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">file_path</span>, </span><span class=\"param\"><span class=\"n\">data</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "asmg_workflow.logs.PickleSerializer", "modulename": "asmg_workflow.logs", "qualname": "PickleSerializer", "kind": "class", "doc": "<p>Abstract class defining a serializer interface</p>\n", "bases": "Serializer"}, {"fullname": "asmg_workflow.logs.PickleSerializer.extension", "modulename": "asmg_workflow.logs", "qualname": "PickleSerializer.extension", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "asmg_workflow.logs.PickleSerializer.load", "modulename": "asmg_workflow.logs", "qualname": "PickleSerializer.load", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">file_path</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "asmg_workflow.logs.PickleSerializer.save", "modulename": "asmg_workflow.logs", "qualname": "PickleSerializer.save", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">file_path</span>, </span><span class=\"param\"><span class=\"n\">data</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "asmg_workflow.logs.JsonSerializer", "modulename": "asmg_workflow.logs", "qualname": "JsonSerializer", "kind": "class", "doc": "<p>Abstract class defining a serializer interface</p>\n", "bases": "Serializer"}, {"fullname": "asmg_workflow.logs.JsonSerializer.extension", "modulename": "asmg_workflow.logs", "qualname": "JsonSerializer.extension", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "asmg_workflow.logs.JsonSerializer.load", "modulename": "asmg_workflow.logs", "qualname": "JsonSerializer.load", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">file_path</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "asmg_workflow.logs.JsonSerializer.save", "modulename": "asmg_workflow.logs", "qualname": "JsonSerializer.save", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">file_path</span>, </span><span class=\"param\"><span class=\"n\">data</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "asmg_workflow.logs.YamlSerializer", "modulename": "asmg_workflow.logs", "qualname": "YamlSerializer", "kind": "class", "doc": "<p>Abstract class defining a serializer interface</p>\n", "bases": "Serializer"}, {"fullname": "asmg_workflow.logs.YamlSerializer.extension", "modulename": "asmg_workflow.logs", "qualname": "YamlSerializer.extension", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "asmg_workflow.logs.YamlSerializer.load", "modulename": "asmg_workflow.logs", "qualname": "YamlSerializer.load", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">file_path</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "asmg_workflow.logs.YamlSerializer.save", "modulename": "asmg_workflow.logs", "qualname": "YamlSerializer.save", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">file_path</span>, </span><span class=\"param\"><span class=\"n\">data</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "asmg_workflow.logs.YamlSerializer.append", "modulename": "asmg_workflow.logs", "qualname": "YamlSerializer.append", "kind": "function", "doc": "<p>For data types that have an append, otherwise is just defaulted to the save function</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">file_path</span>, </span><span class=\"param\"><span class=\"n\">data</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "asmg_workflow.logs.DbSerializer", "modulename": "asmg_workflow.logs", "qualname": "DbSerializer", "kind": "class", "doc": "<p>Abstract class for serializers interacting with a database</p>\n", "bases": "Serializer"}, {"fullname": "asmg_workflow.logs.DbSerializer.save", "modulename": "asmg_workflow.logs", "qualname": "DbSerializer.save", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "asmg_workflow.logs.DbSerializer.load", "modulename": "asmg_workflow.logs", "qualname": "DbSerializer.load", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "asmg_workflow.logs.MongoSerializer", "modulename": "asmg_workflow.logs", "qualname": "MongoSerializer", "kind": "class", "doc": "<p>Abstract class for serializers interacting with a database</p>\n", "bases": "DbSerializer"}, {"fullname": "asmg_workflow.logs.MongoSerializer.__init__", "modulename": "asmg_workflow.logs", "qualname": "MongoSerializer.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">mongo_url</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">db_name</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">options</span></span>)</span>"}, {"fullname": "asmg_workflow.logs.MongoSerializer.db_name", "modulename": "asmg_workflow.logs", "qualname": "MongoSerializer.db_name", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "asmg_workflow.logs.MongoSerializer.mongo_url", "modulename": "asmg_workflow.logs", "qualname": "MongoSerializer.mongo_url", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "asmg_workflow.logs.MongoSerializer.save", "modulename": "asmg_workflow.logs", "qualname": "MongoSerializer.save", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">collection_name</span>, </span><span class=\"param\"><span class=\"n\">data</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "asmg_workflow.logs.MongoSerializer.load", "modulename": "asmg_workflow.logs", "qualname": "MongoSerializer.load", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">collection_name</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "asmg_workflow.logs.Log", "modulename": "asmg_workflow.logs", "qualname": "Log", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "asmg_workflow.logs.Log.__init__", "modulename": "asmg_workflow.logs", "qualname": "Log.__init__", "kind": "function", "doc": "<p>Creates a log object the optional parameters - file_path = location on disk, log = contents of new log,\nand:\n            {\"serializer\": YamlSerializer(),\n            \"db_serializer\": None,\n            \"directory\": os.getcwd(),\n            \"specific_descriptor\": \"New\",\n            \"general_descriptor\": \"Log\",\n            \"required_keys\": None,\n            \"lock_keys\": False,\n            \"formatting_string\": None,\n            \"auto_save\": True,\n            \"auto_save_mode\": \"w\"}</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">file_path</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">log</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">options</span></span>)</span>"}, {"fullname": "asmg_workflow.logs.Log.log_options", "modulename": "asmg_workflow.logs", "qualname": "Log.log_options", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "asmg_workflow.logs.Log.log", "modulename": "asmg_workflow.logs", "qualname": "Log.log", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "asmg_workflow.logs.Log.n", "modulename": "asmg_workflow.logs", "qualname": "Log.n", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "asmg_workflow.logs.Log.add_entry", "modulename": "asmg_workflow.logs", "qualname": "Log.add_entry", "kind": "function", "doc": "<p>Adds a new entry to the log. By default, it uses datetime.now as a timestamp</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">entry</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "asmg_workflow.logs.Log.save", "modulename": "asmg_workflow.logs", "qualname": "Log.save", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">file_path</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">options</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "asmg_workflow.logs.Log.append_last", "modulename": "asmg_workflow.logs", "qualname": "Log.append_last", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">file_path</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">options</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "asmg_workflow.logs.Log.filter_by_key", "modulename": "asmg_workflow.logs", "qualname": "Log.filter_by_key", "kind": "function", "doc": "<p>Returns a sublist of dictionaries that have key in them.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">key</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "asmg_workflow.logs.Log.filter_by_value", "modulename": "asmg_workflow.logs", "qualname": "Log.filter_by_value", "kind": "function", "doc": "<p>Returns a sublist of dictionaries that have key = value.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">key</span>, </span><span class=\"param\"><span class=\"n\">value</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "asmg_workflow.logs.Log.count_key", "modulename": "asmg_workflow.logs", "qualname": "Log.count_key", "kind": "function", "doc": "<p>Returns the number of elements with key.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">key</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "asmg_workflow.logs.Log.count_value", "modulename": "asmg_workflow.logs", "qualname": "Log.count_value", "kind": "function", "doc": "<p>Returns the number of elements with key = value.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">key</span>, </span><span class=\"param\"><span class=\"n\">value</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "asmg_workflow.logs.Log.get_unique_keys", "modulename": "asmg_workflow.logs", "qualname": "Log.get_unique_keys", "kind": "function", "doc": "<p>Returns an unsorted list of the unique keys found among the elements of the log.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "asmg_workflow.logs.test_Log", "modulename": "asmg_workflow.logs", "qualname": "test_Log", "kind": "function", "doc": "<p>Script to test Log class behavior</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "asmg_workflow.tasks", "modulename": "asmg_workflow.tasks", "kind": "module", "doc": "<p>tasks is a module that holds the predefined tasks for the nasctn_workflow software. A Task is a class that represents\nan abstract task to be done. It must have the attributes task.started and task.completed. In addition,\nthe method task.execute() is designed to be overloaded to define exactly what happens when the task is run. The\nclass Dependency defines a condition that should be checked before a task executes.</p>\n"}, {"fullname": "asmg_workflow.tasks.print_time", "modulename": "asmg_workflow.tasks", "qualname": "print_time", "kind": "function", "doc": "<p>A function that prints the time every 1 second for duration to test tasks</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">duration</span><span class=\"o\">=</span><span class=\"mi\">100</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "asmg_workflow.tasks.always_true", "modulename": "asmg_workflow.tasks", "qualname": "always_true", "kind": "function", "doc": "<p>Test checker that always returns True</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">dependency</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "asmg_workflow.tasks.always_false", "modulename": "asmg_workflow.tasks", "qualname": "always_false", "kind": "function", "doc": "<p>Test checker that always returns False</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">dependency</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "asmg_workflow.tasks.timer", "modulename": "asmg_workflow.tasks", "qualname": "timer", "kind": "function", "doc": "<p>Timer checker that checks if a time in input = {'absolute_time':Datetime} has elapsed or\nif a relative time specified by input = {'relative_time':TimeDelta,'start_time':DateTime} has elapsed</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">dependency</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "asmg_workflow.tasks.time_of_day_checker", "modulename": "asmg_workflow.tasks", "qualname": "time_of_day_checker", "kind": "function", "doc": "<p>Time of day checker determines if it is currently between start time and stop time</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">dependency</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "asmg_workflow.tasks.task_checker", "modulename": "asmg_workflow.tasks", "qualname": "task_checker", "kind": "function", "doc": "<p>Determines if a the task in input = {'task':Task} has been completed</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">dependency</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "asmg_workflow.tasks.task_value_type_checker", "modulename": "asmg_workflow.tasks", "qualname": "task_value_type_checker", "kind": "function", "doc": "<p>Determines if the task is done and the output is off the type input ={'task':Task,'ouptut_name':name,'output_type':int}</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">dependency</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "asmg_workflow.tasks.type_checker", "modulename": "asmg_workflow.tasks", "qualname": "type_checker", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">dependency</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "asmg_workflow.tasks.file_exists_checker", "modulename": "asmg_workflow.tasks", "qualname": "file_exists_checker", "kind": "function", "doc": "<p>Checks to see if a file exits, requires the dependency to have input  = {'file':fileName}</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">dependency</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "asmg_workflow.tasks.visa_resource", "modulename": "asmg_workflow.tasks", "qualname": "visa_resource", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">dependency</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "asmg_workflow.tasks.ip_resource", "modulename": "asmg_workflow.tasks", "qualname": "ip_resource", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">dependency</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "asmg_workflow.tasks.ue_resource", "modulename": "asmg_workflow.tasks", "qualname": "ue_resource", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">dependency</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "asmg_workflow.tasks.DependencyError", "modulename": "asmg_workflow.tasks", "qualname": "DependencyError", "kind": "class", "doc": "<p>Common base class for all non-exit exceptions.</p>\n", "bases": "builtins.Exception"}, {"fullname": "asmg_workflow.tasks.TaskError", "modulename": "asmg_workflow.tasks", "qualname": "TaskError", "kind": "class", "doc": "<p>Common base class for all non-exit exceptions.</p>\n", "bases": "builtins.Exception"}, {"fullname": "asmg_workflow.tasks.Dependency", "modulename": "asmg_workflow.tasks", "qualname": "Dependency", "kind": "class", "doc": "<p>A dependency is simply a dictionary with the keys: type, input,on_fail, checker, duration,\nnumber_repeats, repeat_until. The value of on_fail determines the behavior of the task when it fails the\n dependency check, the possible values are pass, repeat_n_times, repeat_until, repeat_for</p>\n", "bases": "builtins.dict"}, {"fullname": "asmg_workflow.tasks.TimeOfDayDependency", "modulename": "asmg_workflow.tasks", "qualname": "TimeOfDayDependency", "kind": "class", "doc": "<p>Built to make sure it is a specific time of day on a 24 hour clock</p>\n", "bases": "Dependency"}, {"fullname": "asmg_workflow.tasks.TaskDependency", "modulename": "asmg_workflow.tasks", "qualname": "TaskDependency", "kind": "class", "doc": "<p>A dependency is simply a dictionary with the keys: type, input,on_fail, checker, duration,\nnumber_repeats, repeat_until. The value of on_fail determines the behavior of the task when it fails the\n dependency check, the possible values are pass, repeat_n_times, repeat_until, repeat_for</p>\n", "bases": "Dependency"}, {"fullname": "asmg_workflow.tasks.TaskOutputDependency", "modulename": "asmg_workflow.tasks", "qualname": "TaskOutputDependency", "kind": "class", "doc": "<p>A dependency is simply a dictionary with the keys: type, input,on_fail, checker, duration,\nnumber_repeats, repeat_until. The value of on_fail determines the behavior of the task when it fails the\n dependency check, the possible values are pass, repeat_n_times, repeat_until, repeat_for</p>\n", "bases": "Dependency"}, {"fullname": "asmg_workflow.tasks.TypeDependency", "modulename": "asmg_workflow.tasks", "qualname": "TypeDependency", "kind": "class", "doc": "<p>A dependency is simply a dictionary with the keys: type, input,on_fail, checker, duration,\nnumber_repeats, repeat_until. The value of on_fail determines the behavior of the task when it fails the\n dependency check, the possible values are pass, repeat_n_times, repeat_until, repeat_for</p>\n", "bases": "Dependency"}, {"fullname": "asmg_workflow.tasks.VisaDependency", "modulename": "asmg_workflow.tasks", "qualname": "VisaDependency", "kind": "class", "doc": "<p>A dependency is simply a dictionary with the keys: type, input,on_fail, checker, duration,\nnumber_repeats, repeat_until. The value of on_fail determines the behavior of the task when it fails the\n dependency check, the possible values are pass, repeat_n_times, repeat_until, repeat_for</p>\n", "bases": "Dependency"}, {"fullname": "asmg_workflow.tasks.VisaDependency.__init__", "modulename": "asmg_workflow.tasks", "qualname": "VisaDependency.__init__", "kind": "function", "doc": "<p>Dependency that checks if a visa resource responds with the right idn. The input should be of the form\ninput = {'resource_name':VISAResource,'idn':ReturnedIDN}</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"nb\">type</span><span class=\"o\">=</span><span class=\"s1\">&#39;visa&#39;</span>,</span><span class=\"param\">\t<span class=\"nb\">input</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">on_fail</span><span class=\"o\">=</span><span class=\"s1\">&#39;error&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">checker</span><span class=\"o\">=</span><span class=\"s1\">&#39;visa_resource&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">duration</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">number_repeats</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">repeat_time</span><span class=\"o\">=</span><span class=\"kc\">None</span></span>)</span>"}, {"fullname": "asmg_workflow.tasks.Task", "modulename": "asmg_workflow.tasks", "qualname": "Task", "kind": "class", "doc": "<p>An abstract representation of a task to be completed</p>\n"}, {"fullname": "asmg_workflow.tasks.Task.__init__", "modulename": "asmg_workflow.tasks", "qualname": "Task.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">path</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">options</span></span>)</span>"}, {"fullname": "asmg_workflow.tasks.Task.task_options", "modulename": "asmg_workflow.tasks", "qualname": "Task.task_options", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "asmg_workflow.tasks.Task.name", "modulename": "asmg_workflow.tasks", "qualname": "Task.name", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "asmg_workflow.tasks.Task.dependencies", "modulename": "asmg_workflow.tasks", "qualname": "Task.dependencies", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "asmg_workflow.tasks.Task.met_dependencies", "modulename": "asmg_workflow.tasks", "qualname": "Task.met_dependencies", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "asmg_workflow.tasks.Task.dependency_repeats", "modulename": "asmg_workflow.tasks", "qualname": "Task.dependency_repeats", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "asmg_workflow.tasks.Task.dependency_times", "modulename": "asmg_workflow.tasks", "qualname": "Task.dependency_times", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "asmg_workflow.tasks.Task.dependency_durations", "modulename": "asmg_workflow.tasks", "qualname": "Task.dependency_durations", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "asmg_workflow.tasks.Task.id", "modulename": "asmg_workflow.tasks", "qualname": "Task.id", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "asmg_workflow.tasks.Task.start_time", "modulename": "asmg_workflow.tasks", "qualname": "Task.start_time", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "asmg_workflow.tasks.Task.timer", "modulename": "asmg_workflow.tasks", "qualname": "Task.timer", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "asmg_workflow.tasks.Task.completed", "modulename": "asmg_workflow.tasks", "qualname": "Task.completed", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "asmg_workflow.tasks.Task.retries", "modulename": "asmg_workflow.tasks", "qualname": "Task.retries", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "asmg_workflow.tasks.Task.max_tries", "modulename": "asmg_workflow.tasks", "qualname": "Task.max_tries", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "asmg_workflow.tasks.Task.depth", "modulename": "asmg_workflow.tasks", "qualname": "Task.depth", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "asmg_workflow.tasks.Task.started", "modulename": "asmg_workflow.tasks", "qualname": "Task.started", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "asmg_workflow.tasks.Task.count_task_depth", "modulename": "asmg_workflow.tasks", "qualname": "Task.count_task_depth", "kind": "function", "doc": "<p>Counts the depth of task dependencies</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">dependency</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "asmg_workflow.tasks.Task.add_dependency", "modulename": "asmg_workflow.tasks", "qualname": "Task.add_dependency", "kind": "function", "doc": "<p>Adds a dependency to the list Task.dependencies</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">dependency</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "asmg_workflow.tasks.Task.remove_dependency", "modulename": "asmg_workflow.tasks", "qualname": "Task.remove_dependency", "kind": "function", "doc": "<p>Removes a dependency in the list Task.dependencies</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">dependency</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "asmg_workflow.tasks.Task.execute", "modulename": "asmg_workflow.tasks", "qualname": "Task.execute", "kind": "function", "doc": "<p>Causes the task to run</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "asmg_workflow.tasks.Task.get_task_duration", "modulename": "asmg_workflow.tasks", "qualname": "Task.get_task_duration", "kind": "function", "doc": "<p>Returns the current run time for the task</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "asmg_workflow.tasks.Task.throw_dependency_error", "modulename": "asmg_workflow.tasks", "qualname": "Task.throw_dependency_error", "kind": "function", "doc": "<p>Raises the dependency error</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">dependency</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "asmg_workflow.tasks.Task.on_error", "modulename": "asmg_workflow.tasks", "qualname": "Task.on_error", "kind": "function", "doc": "<p>Function that executes on an error in the execution of the task</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">exception</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "asmg_workflow.tasks.Task.check_dependencies", "modulename": "asmg_workflow.tasks", "qualname": "Task.check_dependencies", "kind": "function", "doc": "<p>Iterates through the list self.dependencies and checks if they are satisfied</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "asmg_workflow.tasks.FunctionTask", "modulename": "asmg_workflow.tasks", "qualname": "FunctionTask", "kind": "class", "doc": "<p>An abstract representation of a task to be completed</p>\n", "bases": "Task"}, {"fullname": "asmg_workflow.tasks.FunctionTask.__init__", "modulename": "asmg_workflow.tasks", "qualname": "FunctionTask.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">path</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">function</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">args</span><span class=\"o\">=</span><span class=\"p\">[]</span>, </span><span class=\"param\"><span class=\"n\">kwargs</span><span class=\"o\">=</span><span class=\"p\">{}</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">options</span></span>)</span>"}, {"fullname": "asmg_workflow.tasks.FunctionTask.function", "modulename": "asmg_workflow.tasks", "qualname": "FunctionTask.function", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "asmg_workflow.tasks.FunctionTask.args", "modulename": "asmg_workflow.tasks", "qualname": "FunctionTask.args", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "asmg_workflow.tasks.FunctionTask.kwargs", "modulename": "asmg_workflow.tasks", "qualname": "FunctionTask.kwargs", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "asmg_workflow.tasks.FunctionTask.output", "modulename": "asmg_workflow.tasks", "qualname": "FunctionTask.output", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "asmg_workflow.tasks.FunctionTask.execute", "modulename": "asmg_workflow.tasks", "qualname": "FunctionTask.execute", "kind": "function", "doc": "<p>Causes the task to run</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">args</span><span class=\"o\">=</span><span class=\"p\">[]</span>, </span><span class=\"param\"><span class=\"n\">kwargs</span><span class=\"o\">=</span><span class=\"p\">{}</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "asmg_workflow.tasks.DependentFunctionTask", "modulename": "asmg_workflow.tasks", "qualname": "DependentFunctionTask", "kind": "class", "doc": "<p>An abstract representation of a task to be completed</p>\n", "bases": "Task"}, {"fullname": "asmg_workflow.tasks.DependentFunctionTask.__init__", "modulename": "asmg_workflow.tasks", "qualname": "DependentFunctionTask.__init__", "kind": "function", "doc": "<p>Assumes the input for the function is the output of the task dependencies</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">path</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">function</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">task_dictionary</span><span class=\"o\">=</span><span class=\"p\">{}</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">options</span></span>)</span>"}, {"fullname": "asmg_workflow.tasks.DependentFunctionTask.function", "modulename": "asmg_workflow.tasks", "qualname": "DependentFunctionTask.function", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "asmg_workflow.tasks.DependentFunctionTask.output", "modulename": "asmg_workflow.tasks", "qualname": "DependentFunctionTask.output", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "asmg_workflow.tasks.DependentFunctionTask.task_outputs", "modulename": "asmg_workflow.tasks", "qualname": "DependentFunctionTask.task_outputs", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "asmg_workflow.tasks.DependentFunctionTask.execute", "modulename": "asmg_workflow.tasks", "qualname": "DependentFunctionTask.execute", "kind": "function", "doc": "<p>Causes the task to run</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "asmg_workflow.tasks.MultipleDependentFunctionTask", "modulename": "asmg_workflow.tasks", "qualname": "MultipleDependentFunctionTask", "kind": "class", "doc": "<p>An abstract representation of a task to be completed</p>\n", "bases": "Task"}, {"fullname": "asmg_workflow.tasks.MultipleDependentFunctionTask.__init__", "modulename": "asmg_workflow.tasks", "qualname": "MultipleDependentFunctionTask.__init__", "kind": "function", "doc": "<p>Assumes the input for the function is the output of the task dependencies</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">path</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">function</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">task_dictionary</span><span class=\"o\">=</span><span class=\"p\">{}</span>,</span><span class=\"param\">\t<span class=\"n\">args</span><span class=\"o\">=</span><span class=\"p\">[]</span>,</span><span class=\"param\">\t<span class=\"n\">kwargs</span><span class=\"o\">=</span><span class=\"p\">{}</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">options</span></span>)</span>"}, {"fullname": "asmg_workflow.tasks.MultipleDependentFunctionTask.function", "modulename": "asmg_workflow.tasks", "qualname": "MultipleDependentFunctionTask.function", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "asmg_workflow.tasks.MultipleDependentFunctionTask.output", "modulename": "asmg_workflow.tasks", "qualname": "MultipleDependentFunctionTask.output", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "asmg_workflow.tasks.MultipleDependentFunctionTask.task_outputs", "modulename": "asmg_workflow.tasks", "qualname": "MultipleDependentFunctionTask.task_outputs", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "asmg_workflow.tasks.MultipleDependentFunctionTask.args", "modulename": "asmg_workflow.tasks", "qualname": "MultipleDependentFunctionTask.args", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "asmg_workflow.tasks.MultipleDependentFunctionTask.kwargs", "modulename": "asmg_workflow.tasks", "qualname": "MultipleDependentFunctionTask.kwargs", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "asmg_workflow.tasks.MultipleDependentFunctionTask.execute", "modulename": "asmg_workflow.tasks", "qualname": "MultipleDependentFunctionTask.execute", "kind": "function", "doc": "<p>Causes the task to run</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "asmg_workflow.tasks.ShellTask", "modulename": "asmg_workflow.tasks", "qualname": "ShellTask", "kind": "class", "doc": "<p>Creates a task that writes the string command+arguments to the command line when executed</p>\n", "bases": "Task"}, {"fullname": "asmg_workflow.tasks.ShellTask.__init__", "modulename": "asmg_workflow.tasks", "qualname": "ShellTask.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">path</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">command</span><span class=\"o\">=</span><span class=\"s1\">&#39;start &quot;&quot; cmd /c &quot;echo Hello world!&amp;echo(&amp;pause&quot;&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">arguments</span><span class=\"o\">=</span><span class=\"s1\">&#39;&#39;</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">options</span></span>)</span>"}, {"fullname": "asmg_workflow.tasks.ShellTask.command", "modulename": "asmg_workflow.tasks", "qualname": "ShellTask.command", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "asmg_workflow.tasks.ShellTask.arguments", "modulename": "asmg_workflow.tasks", "qualname": "ShellTask.arguments", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "asmg_workflow.tasks.ShellTask.execute", "modulename": "asmg_workflow.tasks", "qualname": "ShellTask.execute", "kind": "function", "doc": "<p>Causes the task to run</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "asmg_workflow.tasks.StartTask", "modulename": "asmg_workflow.tasks", "qualname": "StartTask", "kind": "class", "doc": "<p>Container for starting tasks in a workflow</p>\n", "bases": "Task"}, {"fullname": "asmg_workflow.tasks.StartTask.__init__", "modulename": "asmg_workflow.tasks", "qualname": "StartTask.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">path</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">&#39;Start_Task_20250406_001.task&#39;</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">options</span></span>)</span>"}, {"fullname": "asmg_workflow.tasks.StopTask", "modulename": "asmg_workflow.tasks", "qualname": "StopTask", "kind": "class", "doc": "<p>Container for the last task in a work flow</p>\n", "bases": "Task"}, {"fullname": "asmg_workflow.tasks.StopTask.__init__", "modulename": "asmg_workflow.tasks", "qualname": "StopTask.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">path</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">&#39;Stop_Task_20250406_001.task&#39;</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">options</span></span>)</span>"}, {"fullname": "asmg_workflow.tasks.SimpleVisaTask", "modulename": "asmg_workflow.tasks", "qualname": "SimpleVisaTask", "kind": "class", "doc": "<p>Sends a single command to a visa resource</p>\n", "bases": "Task"}, {"fullname": "asmg_workflow.tasks.SimpleVisaTask.__init__", "modulename": "asmg_workflow.tasks", "qualname": "SimpleVisaTask.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">path</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">resource_name</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">command</span><span class=\"o\">=</span><span class=\"s1\">&#39;IDN?&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">mode</span><span class=\"o\">=</span><span class=\"s1\">&#39;query&#39;</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">options</span></span>)</span>"}, {"fullname": "asmg_workflow.tasks.SimpleVisaTask.mode", "modulename": "asmg_workflow.tasks", "qualname": "SimpleVisaTask.mode", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "asmg_workflow.tasks.SimpleVisaTask.command", "modulename": "asmg_workflow.tasks", "qualname": "SimpleVisaTask.command", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "asmg_workflow.tasks.SimpleVisaTask.output", "modulename": "asmg_workflow.tasks", "qualname": "SimpleVisaTask.output", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "asmg_workflow.tasks.SimpleVisaTask.resource_name", "modulename": "asmg_workflow.tasks", "qualname": "SimpleVisaTask.resource_name", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "asmg_workflow.tasks.SimpleVisaTask.execute", "modulename": "asmg_workflow.tasks", "qualname": "SimpleVisaTask.execute", "kind": "function", "doc": "<p>Causes the task to run</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "asmg_workflow.tasks.FunctionalExperimentTask", "modulename": "asmg_workflow.tasks", "qualname": "FunctionalExperimentTask", "kind": "class", "doc": "<p>Runs an experiment based on a function. The function should return data as a single dictionary</p>\n", "bases": "Task"}, {"fullname": "asmg_workflow.tasks.FunctionalExperimentTask.__init__", "modulename": "asmg_workflow.tasks", "qualname": "FunctionalExperimentTask.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">function</span>, </span><span class=\"param\"><span class=\"n\">run_list</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">options</span></span>)</span>"}, {"fullname": "asmg_workflow.tasks.FunctionalExperimentTask.task_options", "modulename": "asmg_workflow.tasks", "qualname": "FunctionalExperimentTask.task_options", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "asmg_workflow.tasks.FunctionalExperimentTask.function", "modulename": "asmg_workflow.tasks", "qualname": "FunctionalExperimentTask.function", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "asmg_workflow.tasks.FunctionalExperimentTask.output_path", "modulename": "asmg_workflow.tasks", "qualname": "FunctionalExperimentTask.output_path", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "asmg_workflow.tasks.FunctionalExperimentTask.output", "modulename": "asmg_workflow.tasks", "qualname": "FunctionalExperimentTask.output", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "asmg_workflow.tasks.FunctionalExperimentTask.finished_path", "modulename": "asmg_workflow.tasks", "qualname": "FunctionalExperimentTask.finished_path", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "asmg_workflow.tasks.FunctionalExperimentTask.append_csv_row", "modulename": "asmg_workflow.tasks", "qualname": "FunctionalExperimentTask.append_csv_row", "kind": "function", "doc": "<p>appends a row to the finshed csv</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">filepath</span>, </span><span class=\"param\"><span class=\"n\">point</span>, </span><span class=\"param\"><span class=\"n\">header</span><span class=\"o\">=</span><span class=\"kc\">False</span>, </span><span class=\"param\"><span class=\"n\">index</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "asmg_workflow.tasks.FunctionalExperimentTask.execute", "modulename": "asmg_workflow.tasks", "qualname": "FunctionalExperimentTask.execute", "kind": "function", "doc": "<p>Causes the task to run</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "asmg_workflow.tasks.FunctionalExperimentTask.on_point_error", "modulename": "asmg_workflow.tasks", "qualname": "FunctionalExperimentTask.on_point_error", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">exception</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "asmg_workflow.tasks.test_MultipleDependentFunction", "modulename": "asmg_workflow.tasks", "qualname": "test_MultipleDependentFunction", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "asmg_workflow.tasks.test_Dependency", "modulename": "asmg_workflow.tasks", "qualname": "test_Dependency", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">number_repeats</span><span class=\"o\">=</span><span class=\"mi\">31</span>,</span><span class=\"param\">\t<span class=\"n\">repeat_time</span><span class=\"o\">=</span><span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"p\">(</span><span class=\"mi\">2025</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">20</span><span class=\"p\">,</span> <span class=\"mi\">14</span><span class=\"p\">,</span> <span class=\"mi\">23</span><span class=\"p\">,</span> <span class=\"mi\">879952</span><span class=\"p\">)</span>,</span><span class=\"param\">\t<span class=\"n\">absolute_time</span><span class=\"o\">=</span><span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"p\">(</span><span class=\"mi\">2025</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">20</span><span class=\"p\">,</span> <span class=\"mi\">14</span><span class=\"p\">,</span> <span class=\"mi\">21</span><span class=\"p\">,</span> <span class=\"mi\">879952</span><span class=\"p\">)</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "asmg_workflow.tasks.test_two_FunctionTasks", "modulename": "asmg_workflow.tasks", "qualname": "test_two_FunctionTasks", "kind": "function", "doc": "<p>Tests dependent FunctionTasks</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "asmg_workflow.tasks.test_DependentFunctionTask", "modulename": "asmg_workflow.tasks", "qualname": "test_DependentFunctionTask", "kind": "function", "doc": "<p>Tests dependent FunctionTasks</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "asmg_workflow.tasks.test_FunctionTask", "modulename": "asmg_workflow.tasks", "qualname": "test_FunctionTask", "kind": "function", "doc": "<p>Simple test of the FunctionTask class</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "asmg_workflow.tasks.test_type_checker", "modulename": "asmg_workflow.tasks", "qualname": "test_type_checker", "kind": "function", "doc": "<p>Tests the type checker</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "asmg_workflow.tasks.test_task_checker", "modulename": "asmg_workflow.tasks", "qualname": "test_task_checker", "kind": "function", "doc": "<p>Tests a task dependency and it's checker by making two simple tasks and executing them serially\nand printing diagnostic information.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "asmg_workflow.tasks.test_chained_tasks", "modulename": "asmg_workflow.tasks", "qualname": "test_chained_tasks", "kind": "function", "doc": "<p>Tests a series of tasks that depend on the previous one</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">n_tasks</span><span class=\"o\">=</span><span class=\"mi\">100</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "asmg_workflow.tasks.test_Task", "modulename": "asmg_workflow.tasks", "qualname": "test_Task", "kind": "function", "doc": "<p>Creates a new task and prints the directory</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "asmg_workflow.tasks.test_ShellTask", "modulename": "asmg_workflow.tasks", "qualname": "test_ShellTask", "kind": "function", "doc": "<p>Test's the ShellTask Class by passing it command and executing it</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">command</span><span class=\"o\">=</span><span class=\"s1\">&#39;start &quot;&quot; cmd /c &quot;echo Hello world!&amp;echo(&amp;pause&quot;&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "asmg_workflow.tasks.test_schedule", "modulename": "asmg_workflow.tasks", "qualname": "test_schedule", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "asmg_workflow.utils", "modulename": "asmg_workflow.utils", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "asmg_workflow.utils.concurrently", "modulename": "asmg_workflow.utils", "qualname": "concurrently", "kind": "function", "doc": "<p>If <code>*objs</code> are callable (like functions), call each of\n <code>*objs</code> in concurrent threads. If <code>*objs</code> are context\n managers (such as Device instances to be connected),\n enter each context in concurrent threads.</p>\n\n<p>Multiple references to the same function in <code>funcs</code> only result in one call. The <code>catch</code> and <code>flatten</code>\narguments may be callables, in which case they are executed (and each flag value is treated as defaults).</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>objs</strong>:   each argument may be a callable (function or class that defines a __call__ method), or context manager (such as a Device instance)</li>\n<li><strong>catch</strong>:   if <code>False</code> (the default), a <code>ConcurrentException</code> is raised if any of <code>funcs</code> raise an exception; otherwise, any remaining successful calls are returned as normal</li>\n<li><strong>flatten</strong>:   if not callable and evalues as True, updates the returned dictionary with the dictionary (instead of a nested dictionary)</li>\n<li><strong>nones</strong>:  if not callable and evalues as True, includes entries for calls that return None (default is False)</li>\n<li><strong>traceback_delay</strong>:  if <code>False</code>, immediately show traceback information on a thread exception; if <code>True</code> (the default), wait until all threads finish</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>the values returned by each function</p>\n</blockquote>\n\n<p>Here are some examples:</p>\n\n<p>:Example: Call each function <code>myfunc1</code> and <code>myfunc2</code>, each with no arguments:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">def</span> <span class=\"nf\">do_something_1</span> <span class=\"p\">():</span>\n<span class=\"gp\">&gt;&gt;&gt; </span>    <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mf\">0.5</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span>    <span class=\"k\">return</span> <span class=\"mi\">1</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">def</span> <span class=\"nf\">do_something_2</span> <span class=\"p\">():</span>\n<span class=\"gp\">&gt;&gt;&gt; </span>    <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span>    <span class=\"k\">return</span> <span class=\"mi\">2</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">rets</span> <span class=\"o\">=</span> <span class=\"n\">concurrent</span><span class=\"p\">(</span><span class=\"n\">myfunc1</span><span class=\"p\">,</span> <span class=\"n\">myfunc2</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">rets</span><span class=\"p\">[</span><span class=\"n\">do_something_1</span><span class=\"p\">]</span>\n<span class=\"go\">1</span>\n</code></pre>\n</div>\n\n<p>:Example: To pass arguments, use the Call wrapper</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">def</span> <span class=\"nf\">do_something_3</span> <span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span><span class=\"n\">b</span><span class=\"p\">,</span><span class=\"n\">c</span><span class=\"p\">):</span>\n<span class=\"gp\">&gt;&gt;&gt; </span>    <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span>    <span class=\"k\">return</span> <span class=\"n\">a</span><span class=\"p\">,</span><span class=\"n\">b</span><span class=\"p\">,</span><span class=\"n\">c</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">rets</span> <span class=\"o\">=</span> <span class=\"n\">concurrent</span><span class=\"p\">(</span><span class=\"n\">myfunc1</span><span class=\"p\">,</span> <span class=\"n\">Call</span><span class=\"p\">(</span><span class=\"n\">myfunc3</span><span class=\"p\">,</span><span class=\"n\">a</span><span class=\"p\">,</span><span class=\"n\">b</span><span class=\"p\">,</span><span class=\"n\">c</span><span class=\"o\">=</span><span class=\"n\">c</span><span class=\"p\">))</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">rets</span><span class=\"p\">[</span><span class=\"n\">do_something_3</span><span class=\"p\">]</span>\n<span class=\"go\">a, b, c</span>\n</code></pre>\n</div>\n\n<p><strong>Caveats</strong></p>\n\n<ul>\n<li>Because the calls are in different threads, not different processes,\nthis should be used for IO-bound functions (not CPU-intensive functions).</li>\n<li>Be careful about thread safety.</li>\n</ul>\n\n<p>When the callable object is a Device method, :func concurrency: checks\nthe Device object state.concurrency_support for compatibility\nbefore execution. If this check returns <code>False</code>, this method\nraises a ConcurrentException.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">*</span><span class=\"n\">objs</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kws</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "asmg_workflow.utils.sequentially", "modulename": "asmg_workflow.utils", "qualname": "sequentially", "kind": "function", "doc": "<p>Call each function or method listed in <code>*funcs</code> sequentially.\n The goal is to emulate the behavior of the <code>concurrently</code> function,\n with some of the same support for updating result dictionaries.</p>\n\n<p>Multiple references to the same function in <code>funcs</code> only result in one\ncall. The <code>catch</code> and <code>flatten</code> arguments may be callables, in which\ncase they are executed (and their values are treated as defaults).</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>objs</strong>:   each argument may be a callable (function or class that\ndefines a __call__ method), or context manager (such as a Device instance)</li>\n<li><strong>catch</strong>:   if <code>False</code> (the default), a <code>ConcurrentException</code> is\nraised if any of <code>funcs</code> raise an exception; otherwise, any remaining\nsuccessful calls are returned as normal :param flatten:  if not callable\nand evalues as True, updates the returned dictionary with the\ndictionary (instead of a nested dictionary) :param nones: if not\ncallable and evalues as True, includes entries for calls that return\nNone (default is False) :return: the values returned by each function</li>\n</ul>\n\n<p>Here are some examples:</p>\n\n<p>:Example: Call each function <code>myfunc1</code> and <code>myfunc2</code>, each with no arguments:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span> <span class=\"nn\">labbench</span> <span class=\"k\">as</span> <span class=\"nn\">lb</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">def</span> <span class=\"nf\">do_something_1</span> <span class=\"p\">():</span>\n<span class=\"gp\">&gt;&gt;&gt; </span>    <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mf\">0.5</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span>    <span class=\"k\">return</span> <span class=\"mi\">1</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">def</span> <span class=\"nf\">do_something_2</span> <span class=\"p\">():</span>\n<span class=\"gp\">&gt;&gt;&gt; </span>    <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span>    <span class=\"k\">return</span> <span class=\"mi\">2</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">rets</span> <span class=\"o\">=</span> <span class=\"n\">lb</span><span class=\"o\">.</span><span class=\"n\">sequentially</span><span class=\"p\">(</span><span class=\"n\">myfunc1</span><span class=\"p\">,</span> <span class=\"n\">myfunc2</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">rets</span><span class=\"p\">[</span><span class=\"n\">do_something_1</span><span class=\"p\">]</span>\n<span class=\"go\">1</span>\n</code></pre>\n</div>\n\n<p>:Example: To pass arguments, use the Call wrapper</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">def</span> <span class=\"nf\">do_something_3</span> <span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span><span class=\"n\">b</span><span class=\"p\">,</span><span class=\"n\">c</span><span class=\"p\">):</span>\n<span class=\"gp\">&gt;&gt;&gt; </span>    <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span>    <span class=\"k\">return</span> <span class=\"n\">a</span><span class=\"p\">,</span><span class=\"n\">b</span><span class=\"p\">,</span><span class=\"n\">c</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">rets</span> <span class=\"o\">=</span> <span class=\"n\">lb</span><span class=\"o\">.</span><span class=\"n\">sequentially</span><span class=\"p\">(</span><span class=\"n\">myfunc1</span><span class=\"p\">,</span> <span class=\"n\">Call</span><span class=\"p\">(</span><span class=\"n\">myfunc3</span><span class=\"p\">,</span><span class=\"n\">a</span><span class=\"p\">,</span><span class=\"n\">b</span><span class=\"p\">,</span><span class=\"n\">c</span><span class=\"o\">=</span><span class=\"n\">c</span><span class=\"p\">))</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">rets</span><span class=\"p\">[</span><span class=\"n\">do_something_3</span><span class=\"p\">]</span>\n<span class=\"go\">a, b, c</span>\n</code></pre>\n</div>\n\n<p>Because :func sequentially: does not use threading, it does not check\nwhether a Device method supports concurrency before it runs.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">*</span><span class=\"n\">funcs</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kws</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "asmg_workflow.utils.Call", "modulename": "asmg_workflow.utils", "qualname": "Call", "kind": "class", "doc": "<p>Wrap a function to apply arguments for threaded calls to <code>concurrently</code>.\nThis can be passed in directly by a user in order to provide arguments;\notherwise, it will automatically be wrapped inside <code>concurrently</code> to\nkeep track of some call metadata during execution.</p>\n"}, {"fullname": "asmg_workflow.utils.Call.__init__", "modulename": "asmg_workflow.utils", "qualname": "Call.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">func</span>, </span><span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kws</span></span>)</span>"}, {"fullname": "asmg_workflow.utils.Call.func", "modulename": "asmg_workflow.utils", "qualname": "Call.func", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "asmg_workflow.utils.Call.name", "modulename": "asmg_workflow.utils", "qualname": "Call.name", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "asmg_workflow.utils.Call.args", "modulename": "asmg_workflow.utils", "qualname": "Call.args", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "asmg_workflow.utils.Call.kws", "modulename": "asmg_workflow.utils", "qualname": "Call.kws", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "asmg_workflow.utils.Call.queue", "modulename": "asmg_workflow.utils", "qualname": "Call.queue", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "asmg_workflow.utils.Call.set_queue", "modulename": "asmg_workflow.utils", "qualname": "Call.set_queue", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">queue</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "asmg_workflow.utils.Call.setup", "modulename": "asmg_workflow.utils", "qualname": "Call.setup", "kind": "function", "doc": "<p>Setup threading (concurrent execution only), including\nchecks for whether a Device instance indicates it supports\nconcurrent execution or not.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">func_in</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "asmg_workflow.utils.Call.cleanup", "modulename": "asmg_workflow.utils", "qualname": "Call.cleanup", "kind": "function", "doc": "<p>Cleanup threading (concurrent execution only)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">func_in</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "asmg_workflow.utils.ConcurrentException", "modulename": "asmg_workflow.utils", "qualname": "ConcurrentException", "kind": "class", "doc": "<p>Common base class for all non-exit exceptions.</p>\n", "bases": "builtins.Exception"}, {"fullname": "asmg_workflow.utils.ConfigStore", "modulename": "asmg_workflow.utils", "qualname": "ConfigStore", "kind": "class", "doc": "<p>Define dictionaries of configuration settings\nin subclasses of this object. Each dictionary should\nbe an attribute of the subclass. The all() class method\nreturns a flattened dictionary consisting of all values\nof these dictionary attributes, keyed according to\n'{attr_name}_{attr_key}', where {attr_name} is the\nname of the dictionary attribute and {attr_key} is the\nnested dictionary key.</p>\n"}, {"fullname": "asmg_workflow.utils.ConfigStore.all", "modulename": "asmg_workflow.utils", "qualname": "ConfigStore.all", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">cls</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "asmg_workflow.utils.ConfigStore.frame", "modulename": "asmg_workflow.utils", "qualname": "ConfigStore.frame", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">cls</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "asmg_workflow.utils.ConcurrentRunner", "modulename": "asmg_workflow.utils", "qualname": "ConcurrentRunner", "kind": "class", "doc": "<p>Concurrently runs all staticmethods or classmethods\ndefined in the subclass.</p>\n"}, {"fullname": "asmg_workflow.utils.FilenameDict", "modulename": "asmg_workflow.utils", "qualname": "FilenameDict", "kind": "class", "doc": "<p>Sometimes instrument configuration file can be defined according\nto a combination of several test parameters.</p>\n\n<p>This class provides a way of mapping these parameters to and from a\nfilename string.</p>\n\n<p>They keys are sorted alphabetically, just as in the underlying\nSortedDict.</p>\n", "bases": "sortedcontainers.sorteddict.SortedDict"}, {"fullname": "asmg_workflow.utils.FilenameDict.from_filename", "modulename": "asmg_workflow.utils", "qualname": "FilenameDict.from_filename", "kind": "function", "doc": "<p>Convert from a FilenameDict filename string to a FilenameDict\nobject.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">cls</span>, </span><span class=\"param\"><span class=\"n\">filename</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "asmg_workflow.utils.FilenameDict.from_index", "modulename": "asmg_workflow.utils", "qualname": "FilenameDict.from_index", "kind": "function", "doc": "<p>Make a FilenameDict where the keys are taken from df.index\nand the values are constant values provided.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">cls</span>, </span><span class=\"param\"><span class=\"n\">df</span>, </span><span class=\"param\"><span class=\"n\">value</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "asmg_workflow.utils.hash_caller", "modulename": "asmg_workflow.utils", "qualname": "hash_caller", "kind": "function", "doc": "<p>Use introspection to return an SHA224 hex digest of the caller, which\nis almost certainly unique to the combination of the caller source code\nand the arguments passed it.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">call_depth</span><span class=\"o\">=</span><span class=\"mi\">1</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "asmg_workflow.utils.kill_by_name", "modulename": "asmg_workflow.utils", "qualname": "kill_by_name", "kind": "function", "doc": "<p>Kill one or more running processes by the name(s) of matching binaries.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>names</strong>:  list of names of processes to kill</li>\n</ul>\n\n<p>:example:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># Kill any binaries called &#39;notepad.exe&#39; or &#39;notepad2.exe&#39;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">kill_by_name</span><span class=\"p\">(</span><span class=\"s1\">&#39;notepad.exe&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;notepad2.exe&#39;</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n\n<p>:Notes:\nLooks for a case-insensitive match against the Process.name() in the\npsutil library. Though psutil is cross-platform, the naming convention\nreturned by name() is platform-dependent. In windows, for example, name()\nusually ends in '.exe'.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">*</span><span class=\"n\">names</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "asmg_workflow.utils.check_master", "modulename": "asmg_workflow.utils", "qualname": "check_master", "kind": "function", "doc": "<p>Raise ThreadEndedByMaster if the master thread as requested this\nthread to end.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "asmg_workflow.utils.retry", "modulename": "asmg_workflow.utils", "qualname": "retry", "kind": "function", "doc": "<p>This decorator causes the function call to repeat, suppressing specified exception(s), until a\nmaximum number of retries has been attempted.</p>\n\n<ul>\n<li>If the function raises the exception the specified number of times, the underlying exception is raised.</li>\n<li>Otherwise, return the result of the function call.</li>\n</ul>\n\n<p>:example:\nThe following retries the telnet connection 5 times on ConnectionRefusedError::</p>\n\n<pre><code>import telnetlib\n\n# Retry a telnet connection 5 times if the telnet library raises ConnectionRefusedError\n@retry(ConnectionRefusedError, tries=5)\ndef connect(host, port):\n    t = telnetlib.Telnet()\n    t.open(host,port,5)\n    return t\n</code></pre>\n\n<p>Inspired by <a href=\"https://github.com/saltycrane/retry-decorator\">https://github.com/saltycrane/retry-decorator</a> which is released\nunder the BSD license.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>exception_or_exceptions</strong>:  Exception (sub)class (or tuple of exception classes) to watch for</li>\n<li><strong>tries</strong>:  number of times to try before giving up</li>\n<li><strong>delay</strong>:  initial delay between retries in seconds</li>\n<li><strong>backoff</strong>:  backoff to multiply to the delay for each retry</li>\n<li><strong>exception_func</strong>:  function to call on exception before the next retry</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">exception_or_exceptions</span>,</span><span class=\"param\">\t<span class=\"n\">tries</span><span class=\"o\">=</span><span class=\"mi\">4</span>,</span><span class=\"param\">\t<span class=\"n\">delay</span><span class=\"o\">=</span><span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">backoff</span><span class=\"o\">=</span><span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">exception_func</span><span class=\"o\">=&lt;</span><span class=\"n\">function</span> <span class=\"o\">&lt;</span><span class=\"k\">lambda</span><span class=\"o\">&gt;&gt;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "asmg_workflow.utils.show_messages", "modulename": "asmg_workflow.utils", "qualname": "show_messages", "kind": "function", "doc": "<p>Configure screen debug message output for any messages as least as important as indicated by <code>level</code>.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>minimum_level</strong>:  One of 'debug', 'warning', 'error', or None. If None, there will be no output.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">minimum_level</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "asmg_workflow.utils.sleep", "modulename": "asmg_workflow.utils", "qualname": "sleep", "kind": "function", "doc": "<p>Drop-in replacement for time.sleep that raises ConcurrentException\nif another thread requests that all threads stop.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">seconds</span>, </span><span class=\"param\"><span class=\"n\">tick</span><span class=\"o\">=</span><span class=\"mf\">1.0</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "asmg_workflow.utils.stopwatch", "modulename": "asmg_workflow.utils", "qualname": "stopwatch", "kind": "function", "doc": "<p>Time a block of code using a with statement like this:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">with</span> <span class=\"n\">stopwatch</span><span class=\"p\">(</span><span class=\"s1\">&#39;sleep statement&#39;</span><span class=\"p\">):</span>\n<span class=\"gp\">&gt;&gt;&gt; </span>    <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"go\">sleep statement time elapsed 1.999s.</span>\n</code></pre>\n</div>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>desc</strong>:  text for display that describes the event being timed</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>context manager</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">desc</span><span class=\"o\">=</span><span class=\"s1\">&#39;&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "asmg_workflow.utils.Testbed", "modulename": "asmg_workflow.utils", "qualname": "Testbed", "kind": "class", "doc": "<p>Base class for testbeds that contain multiple Device instances\nor other objects like database managers that implement context\nmanagement.</p>\n\n<p>Use a <code>with</code> block with the testbed instance to connect everything\nat once like so::</p>\n\n<pre><code>with Testbed() as testbed:\n    # use the testbed here\n    pass\n</code></pre>\n\n<p>or optionally connect only a subset of devices like this::</p>\n\n<pre><code>testbed = Testbed()\nwith testbed.dev1, testbed.dev2:\n    # use the testbed.dev1 and testbed.dev2 here\n    pass\n</code></pre>\n\n<p>Make your own subclass of Testbed with a custom <code>make</code>\nmethod to define the Device or database manager instances, and\na custom <code>startup</code> method to implement custom code to set up the\ntestbed after each Device is connected.</p>\n"}, {"fullname": "asmg_workflow.utils.Testbed.__init__", "modulename": "asmg_workflow.utils", "qualname": "Testbed.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">config</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">concurrent</span><span class=\"o\">=</span><span class=\"kc\">True</span></span>)</span>"}, {"fullname": "asmg_workflow.utils.Testbed.config", "modulename": "asmg_workflow.utils", "qualname": "Testbed.config", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "asmg_workflow.utils.Testbed.make", "modulename": "asmg_workflow.utils", "qualname": "Testbed.make", "kind": "function", "doc": "<p>Implement this method in a subclass of Testbed. It should\nthe drivers as attributes of the Testbed instance, for example::</p>\n\n<pre><code>self.dev1 = MyDevice()\n</code></pre>\n\n<p>This is called automatically when when the testbed class\nis instantiated.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "asmg_workflow.utils.Testbed.startup", "modulename": "asmg_workflow.utils", "qualname": "Testbed.startup", "kind": "function", "doc": "<p>This is called automatically after connect if the testbed is\nconnected using the <code>with</code> statement block.</p>\n\n<p>Implement any custom code here in Testbed subclasses to\nimplement startup of the testbed given connected Device\ninstances.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "asmg_workflow.utils.Testbed.cleanup", "modulename": "asmg_workflow.utils", "qualname": "Testbed.cleanup", "kind": "function", "doc": "<p>This is called automatically immediately before disconnect if the\ntestbed is connected using the <code>with</code> statement block.</p>\n\n<p>Implement any custom code here in Testbed subclasses to\nimplement startup of the testbed given connected Device\ninstances.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "asmg_workflow.utils.ThreadSandbox", "modulename": "asmg_workflow.utils", "qualname": "ThreadSandbox", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "asmg_workflow.utils.ThreadSandbox.__init__", "modulename": "asmg_workflow.utils", "qualname": "ThreadSandbox.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">factory</span>, </span><span class=\"param\"><span class=\"n\">should_sandbox_func</span><span class=\"o\">=</span><span class=\"kc\">None</span></span>)</span>"}, {"fullname": "asmg_workflow.utils.ThreadEndedByMaster", "modulename": "asmg_workflow.utils", "qualname": "ThreadEndedByMaster", "kind": "class", "doc": "<p>Unspecified run-time error.</p>\n", "bases": "builtins.RuntimeError"}, {"fullname": "asmg_workflow.utils.until_timeout", "modulename": "asmg_workflow.utils", "qualname": "until_timeout", "kind": "function", "doc": "<p>This decorator causes the function call to repeat, suppressing specified exception(s), until the\nspecified timeout period has expired.</p>\n\n<ul>\n<li>If the timeout expires, the underlying exception is raised.</li>\n<li>Otherwise, return the result of the function call.</li>\n</ul>\n\n<p>Inspired by <a href=\"https://github.com/saltycrane/retry-decorator\">https://github.com/saltycrane/retry-decorator</a> which is released\nunder the BSD license.</p>\n\n<p>:example:\nThe following retries the telnet connection for 5 seconds on ConnectionRefusedError::</p>\n\n<pre><code>import telnetlib\n\n@until_timeout(ConnectionRefusedError, 5)\ndef connect(host, port):\n    t = telnetlib.Telnet()\n    t.open(host,port,5)\n    return t\n</code></pre>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>exception_or_exceptions</strong>:  Exception (sub)class (or tuple of exception classes) to watch for</li>\n<li><strong>timeout</strong>:  time in seconds to continue calling the decorated function while suppressing exception_or_exceptions</li>\n<li><strong>delay</strong>:  initial delay between retries in seconds</li>\n<li><strong>backoff</strong>:  backoff to multiply to the delay for each retry</li>\n<li><strong>exception_func</strong>:  function to call on exception before the next retry</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">exception_or_exceptions</span>,</span><span class=\"param\">\t<span class=\"n\">timeout</span>,</span><span class=\"param\">\t<span class=\"n\">delay</span><span class=\"o\">=</span><span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">backoff</span><span class=\"o\">=</span><span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">exception_func</span><span class=\"o\">=&lt;</span><span class=\"n\">function</span> <span class=\"o\">&lt;</span><span class=\"k\">lambda</span><span class=\"o\">&gt;&gt;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "asmg_workflow.utils.ConnectionError", "modulename": "asmg_workflow.utils", "qualname": "ConnectionError", "kind": "class", "doc": "<p>Common base class for all non-exit exceptions.</p>\n", "bases": "traitlets.traitlets.TraitError"}, {"fullname": "asmg_workflow.utils.DeviceNotReady", "modulename": "asmg_workflow.utils", "qualname": "DeviceNotReady", "kind": "class", "doc": "<p>Common base class for all non-exit exceptions.</p>\n", "bases": "builtins.Exception"}, {"fullname": "asmg_workflow.utils.DeviceFatalError", "modulename": "asmg_workflow.utils", "qualname": "DeviceFatalError", "kind": "class", "doc": "<p>Common base class for all non-exit exceptions.</p>\n", "bases": "builtins.Exception"}, {"fullname": "asmg_workflow.utils.DeviceException", "modulename": "asmg_workflow.utils", "qualname": "DeviceException", "kind": "class", "doc": "<p>Common base class for all non-exit exceptions.</p>\n", "bases": "builtins.Exception"}, {"fullname": "asmg_workflow.utils.DeviceConnectionLost", "modulename": "asmg_workflow.utils", "qualname": "DeviceConnectionLost", "kind": "class", "doc": "<p>Common base class for all non-exit exceptions.</p>\n", "bases": "builtins.Exception"}, {"fullname": "asmg_workflow.utils.Undefined", "modulename": "asmg_workflow.utils", "qualname": "Undefined", "kind": "variable", "doc": "<p></p>\n", "default_value": "traitlets.Undefined"}, {"fullname": "asmg_workflow.utils.All", "modulename": "asmg_workflow.utils", "qualname": "All", "kind": "variable", "doc": "<p></p>\n", "default_value": "traitlets.All"}, {"fullname": "asmg_workflow.utils.DeviceStateError", "modulename": "asmg_workflow.utils", "qualname": "DeviceStateError", "kind": "class", "doc": "<p>Common base class for all non-exit exceptions.</p>\n", "bases": "traitlets.traitlets.TraitError"}, {"fullname": "asmg_workflow.utils.Int", "modulename": "asmg_workflow.utils", "qualname": "Int", "kind": "class", "doc": "<p>Includes added mix-in features for device control into traitlets types:</p>\n\n<ul>\n<li>If the instance is an attribute of a HasStateTraits class, there are hooks for\nlive synchronization with the remote device by sending or receiving data.\nImplement with one of\n<ul>\n<li><code>getter</code> and/or <code>setter</code> keywords in __init__ to pass in a function;</li>\n<li>metadata passed in through the <code>command</code> keyword, which the parent\nHasStateTraits instance may use in its own <code>getter</code> and <code>setter</code>\nimplementations</li>\n</ul></li>\n<li>Adds metadata for autogenerating documentation (see <code>doc_attrs</code>)</li>\n</ul>\n\n<p>Order is important - the class should inherit TraitMixIn first and the\ndesired traitlet type second.</p>\n", "bases": "TraitMixIn, traitlets.traitlets.CInt"}, {"fullname": "asmg_workflow.utils.Int.doc_attrs", "modulename": "asmg_workflow.utils", "qualname": "Int.doc_attrs", "kind": "variable", "doc": "<p></p>\n", "default_value": "(&#x27;min&#x27;, &#x27;max&#x27;, &#x27;command&#x27;, &#x27;read_only&#x27;, &#x27;write_only&#x27;, &#x27;remap&#x27;, &#x27;cache&#x27;)"}, {"fullname": "asmg_workflow.utils.Float", "modulename": "asmg_workflow.utils", "qualname": "Float", "kind": "class", "doc": "<p>Includes added mix-in features for device control into traitlets types:</p>\n\n<ul>\n<li>If the instance is an attribute of a HasStateTraits class, there are hooks for\nlive synchronization with the remote device by sending or receiving data.\nImplement with one of\n<ul>\n<li><code>getter</code> and/or <code>setter</code> keywords in __init__ to pass in a function;</li>\n<li>metadata passed in through the <code>command</code> keyword, which the parent\nHasStateTraits instance may use in its own <code>getter</code> and <code>setter</code>\nimplementations</li>\n</ul></li>\n<li>Adds metadata for autogenerating documentation (see <code>doc_attrs</code>)</li>\n</ul>\n\n<p>Order is important - the class should inherit TraitMixIn first and the\ndesired traitlet type second.</p>\n", "bases": "TraitMixIn, CFLoatSteppedTraitlet"}, {"fullname": "asmg_workflow.utils.Float.doc_attrs", "modulename": "asmg_workflow.utils", "qualname": "Float.doc_attrs", "kind": "variable", "doc": "<p></p>\n", "default_value": "(&#x27;min&#x27;, &#x27;max&#x27;, &#x27;step&#x27;, &#x27;command&#x27;, &#x27;read_only&#x27;, &#x27;write_only&#x27;, &#x27;remap&#x27;, &#x27;cache&#x27;)"}, {"fullname": "asmg_workflow.utils.Float.validate", "modulename": "asmg_workflow.utils", "qualname": "Float.validate", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">obj</span>, </span><span class=\"param\"><span class=\"n\">value</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "asmg_workflow.utils.Unicode", "modulename": "asmg_workflow.utils", "qualname": "Unicode", "kind": "class", "doc": "<p>Includes added mix-in features for device control into traitlets types:</p>\n\n<ul>\n<li>If the instance is an attribute of a HasStateTraits class, there are hooks for\nlive synchronization with the remote device by sending or receiving data.\nImplement with one of\n<ul>\n<li><code>getter</code> and/or <code>setter</code> keywords in __init__ to pass in a function;</li>\n<li>metadata passed in through the <code>command</code> keyword, which the parent\nHasStateTraits instance may use in its own <code>getter</code> and <code>setter</code>\nimplementations</li>\n</ul></li>\n<li>Adds metadata for autogenerating documentation (see <code>doc_attrs</code>)</li>\n</ul>\n\n<p>Order is important - the class should inherit TraitMixIn first and the\ndesired traitlet type second.</p>\n", "bases": "TraitMixIn, traitlets.traitlets.CUnicode"}, {"fullname": "asmg_workflow.utils.Unicode.default_value", "modulename": "asmg_workflow.utils", "qualname": "Unicode.default_value", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[Any]", "default_value": "&#x27;&#x27;"}, {"fullname": "asmg_workflow.utils.Complex", "modulename": "asmg_workflow.utils", "qualname": "Complex", "kind": "class", "doc": "<p>Includes added mix-in features for device control into traitlets types:</p>\n\n<ul>\n<li>If the instance is an attribute of a HasStateTraits class, there are hooks for\nlive synchronization with the remote device by sending or receiving data.\nImplement with one of\n<ul>\n<li><code>getter</code> and/or <code>setter</code> keywords in __init__ to pass in a function;</li>\n<li>metadata passed in through the <code>command</code> keyword, which the parent\nHasStateTraits instance may use in its own <code>getter</code> and <code>setter</code>\nimplementations</li>\n</ul></li>\n<li>Adds metadata for autogenerating documentation (see <code>doc_attrs</code>)</li>\n</ul>\n\n<p>Order is important - the class should inherit TraitMixIn first and the\ndesired traitlet type second.</p>\n", "bases": "TraitMixIn, traitlets.traitlets.CComplex"}, {"fullname": "asmg_workflow.utils.Bytes", "modulename": "asmg_workflow.utils", "qualname": "Bytes", "kind": "class", "doc": "<p>Includes added mix-in features for device control into traitlets types:</p>\n\n<ul>\n<li>If the instance is an attribute of a HasStateTraits class, there are hooks for\nlive synchronization with the remote device by sending or receiving data.\nImplement with one of\n<ul>\n<li><code>getter</code> and/or <code>setter</code> keywords in __init__ to pass in a function;</li>\n<li>metadata passed in through the <code>command</code> keyword, which the parent\nHasStateTraits instance may use in its own <code>getter</code> and <code>setter</code>\nimplementations</li>\n</ul></li>\n<li>Adds metadata for autogenerating documentation (see <code>doc_attrs</code>)</li>\n</ul>\n\n<p>Order is important - the class should inherit TraitMixIn first and the\ndesired traitlet type second.</p>\n", "bases": "TraitMixIn, traitlets.traitlets.CBytes"}, {"fullname": "asmg_workflow.utils.CaselessBytesEnum", "modulename": "asmg_workflow.utils", "qualname": "CaselessBytesEnum", "kind": "class", "doc": "<p>Includes added mix-in features for device control into traitlets types:</p>\n\n<ul>\n<li>If the instance is an attribute of a HasStateTraits class, there are hooks for\nlive synchronization with the remote device by sending or receiving data.\nImplement with one of\n<ul>\n<li><code>getter</code> and/or <code>setter</code> keywords in __init__ to pass in a function;</li>\n<li>metadata passed in through the <code>command</code> keyword, which the parent\nHasStateTraits instance may use in its own <code>getter</code> and <code>setter</code>\nimplementations</li>\n</ul></li>\n<li>Adds metadata for autogenerating documentation (see <code>doc_attrs</code>)</li>\n</ul>\n\n<p>Order is important - the class should inherit TraitMixIn first and the\ndesired traitlet type second.</p>\n", "bases": "TraitMixIn, EnumBytesTraitlet"}, {"fullname": "asmg_workflow.utils.CaselessBytesEnum.doc_attrs", "modulename": "asmg_workflow.utils", "qualname": "CaselessBytesEnum.doc_attrs", "kind": "variable", "doc": "<p></p>\n", "default_value": "(&#x27;values&#x27;, &#x27;case_sensitive&#x27;, &#x27;command&#x27;, &#x27;read_only&#x27;, &#x27;write_only&#x27;, &#x27;remap&#x27;, &#x27;cache&#x27;)"}, {"fullname": "asmg_workflow.utils.Bool", "modulename": "asmg_workflow.utils", "qualname": "Bool", "kind": "class", "doc": "<p>Includes added mix-in features for device control into traitlets types:</p>\n\n<ul>\n<li>If the instance is an attribute of a HasStateTraits class, there are hooks for\nlive synchronization with the remote device by sending or receiving data.\nImplement with one of\n<ul>\n<li><code>getter</code> and/or <code>setter</code> keywords in __init__ to pass in a function;</li>\n<li>metadata passed in through the <code>command</code> keyword, which the parent\nHasStateTraits instance may use in its own <code>getter</code> and <code>setter</code>\nimplementations</li>\n</ul></li>\n<li>Adds metadata for autogenerating documentation (see <code>doc_attrs</code>)</li>\n</ul>\n\n<p>Order is important - the class should inherit TraitMixIn first and the\ndesired traitlet type second.</p>\n", "bases": "TraitMixIn, traitlets.traitlets.CBool"}, {"fullname": "asmg_workflow.utils.Bool.default_value", "modulename": "asmg_workflow.utils", "qualname": "Bool.default_value", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[Any]", "default_value": "False"}, {"fullname": "asmg_workflow.utils.List", "modulename": "asmg_workflow.utils", "qualname": "List", "kind": "class", "doc": "<p>Includes added mix-in features for device control into traitlets types:</p>\n\n<ul>\n<li>If the instance is an attribute of a HasStateTraits class, there are hooks for\nlive synchronization with the remote device by sending or receiving data.\nImplement with one of\n<ul>\n<li><code>getter</code> and/or <code>setter</code> keywords in __init__ to pass in a function;</li>\n<li>metadata passed in through the <code>command</code> keyword, which the parent\nHasStateTraits instance may use in its own <code>getter</code> and <code>setter</code>\nimplementations</li>\n</ul></li>\n<li>Adds metadata for autogenerating documentation (see <code>doc_attrs</code>)</li>\n</ul>\n\n<p>Order is important - the class should inherit TraitMixIn first and the\ndesired traitlet type second.</p>\n", "bases": "TraitMixIn, traitlets.traitlets.List"}, {"fullname": "asmg_workflow.utils.List.default_value", "modulename": "asmg_workflow.utils", "qualname": "List.default_value", "kind": "variable", "doc": "<p></p>\n", "default_value": "[]"}, {"fullname": "asmg_workflow.utils.Dict", "modulename": "asmg_workflow.utils", "qualname": "Dict", "kind": "class", "doc": "<p>Includes added mix-in features for device control into traitlets types:</p>\n\n<ul>\n<li>If the instance is an attribute of a HasStateTraits class, there are hooks for\nlive synchronization with the remote device by sending or receiving data.\nImplement with one of\n<ul>\n<li><code>getter</code> and/or <code>setter</code> keywords in __init__ to pass in a function;</li>\n<li>metadata passed in through the <code>command</code> keyword, which the parent\nHasStateTraits instance may use in its own <code>getter</code> and <code>setter</code>\nimplementations</li>\n</ul></li>\n<li>Adds metadata for autogenerating documentation (see <code>doc_attrs</code>)</li>\n</ul>\n\n<p>Order is important - the class should inherit TraitMixIn first and the\ndesired traitlet type second.</p>\n", "bases": "TraitMixIn, traitlets.traitlets.Dict"}, {"fullname": "asmg_workflow.utils.TCPAddress", "modulename": "asmg_workflow.utils", "qualname": "TCPAddress", "kind": "class", "doc": "<p>Includes added mix-in features for device control into traitlets types:</p>\n\n<ul>\n<li>If the instance is an attribute of a HasStateTraits class, there are hooks for\nlive synchronization with the remote device by sending or receiving data.\nImplement with one of\n<ul>\n<li><code>getter</code> and/or <code>setter</code> keywords in __init__ to pass in a function;</li>\n<li>metadata passed in through the <code>command</code> keyword, which the parent\nHasStateTraits instance may use in its own <code>getter</code> and <code>setter</code>\nimplementations</li>\n</ul></li>\n<li>Adds metadata for autogenerating documentation (see <code>doc_attrs</code>)</li>\n</ul>\n\n<p>Order is important - the class should inherit TraitMixIn first and the\ndesired traitlet type second.</p>\n", "bases": "TraitMixIn, traitlets.traitlets.TCPAddress"}, {"fullname": "asmg_workflow.utils.CaselessStrEnum", "modulename": "asmg_workflow.utils", "qualname": "CaselessStrEnum", "kind": "class", "doc": "<p>Includes added mix-in features for device control into traitlets types:</p>\n\n<ul>\n<li>If the instance is an attribute of a HasStateTraits class, there are hooks for\nlive synchronization with the remote device by sending or receiving data.\nImplement with one of\n<ul>\n<li><code>getter</code> and/or <code>setter</code> keywords in __init__ to pass in a function;</li>\n<li>metadata passed in through the <code>command</code> keyword, which the parent\nHasStateTraits instance may use in its own <code>getter</code> and <code>setter</code>\nimplementations</li>\n</ul></li>\n<li>Adds metadata for autogenerating documentation (see <code>doc_attrs</code>)</li>\n</ul>\n\n<p>Order is important - the class should inherit TraitMixIn first and the\ndesired traitlet type second.</p>\n", "bases": "TraitMixIn, traitlets.traitlets.CaselessStrEnum"}, {"fullname": "asmg_workflow.utils.CaselessStrEnum.doc_attrs", "modulename": "asmg_workflow.utils", "qualname": "CaselessStrEnum.doc_attrs", "kind": "variable", "doc": "<p></p>\n", "default_value": "(&#x27;values&#x27;, &#x27;command&#x27;, &#x27;read_only&#x27;, &#x27;write_only&#x27;, &#x27;remap&#x27;, &#x27;cache&#x27;)"}, {"fullname": "asmg_workflow.utils.Device", "modulename": "asmg_workflow.utils", "qualname": "Device", "kind": "class", "doc": "<p><code>Device</code> is the base class common to all labbench\ndrivers. Inherit it to implement a backend, or a specialized type of\ndriver.</p>\n\n<p>Drivers that subclass <code>Device</code> get</p>\n\n<ul>\n<li>device connection management via context management (the <code>with</code> statement)</li>\n<li>test state management for easy test logging and extension to UI</li>\n<li>a degree automatic stylistic consistency between drivers</li>\n</ul>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>resource</strong>:  resource identifier, with type and format determined by backend (see specific subclasses for details)</li>\n<li><strong>**local_states</strong>:  set the local state for each supplied state key and value</li>\n</ul>\n\n<div class=\"alert note\">\n\n<p>Use <code>Device</code> by subclassing it only if you are\nimplementing a driver that needs a new type of backend.</p>\n\n<p>Several types of backends have already been implemented\nas part of labbench:</p>\n\n<pre><code>* VISADevice exposes a pyvisa backend for VISA Instruments\n* CommandLineWrapper exposes a threaded pipes backend for command line tools\n* Serial exposes a pyserial backend for serial port communication\n* DotNetDevice exposes a pythonnet for wrapping dotnet libraries\n</code></pre>\n\n<p>(and others). If you are implementing a driver that uses one of\nthese backends, inherit from the corresponding class above, not\n<code>Device</code>.</p>\n\n</div>\n\n<ul>\n<li><strong><code>Unicode()</code> resource</strong>: \nthe data needed to make a connection to a device. its type and format are determined by the subclass implementationthe data needed to make a connection to a device. its type and format are determined by the subclass implementation</li>\n</ul>\n"}, {"fullname": "asmg_workflow.utils.Device.__init__", "modulename": "asmg_workflow.utils", "qualname": "Device.__init__", "kind": "function", "doc": "<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong><code>Unicode()</code> resource</strong>: \nthe data needed to make a connection to a device. its type and format are determined by the subclass implementationthe data needed to make a connection to a device. its type and format are determined by the subclass implementation</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">resource</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">settings</span></span>)</span>"}, {"fullname": "asmg_workflow.utils.Device.settings", "modulename": "asmg_workflow.utils", "qualname": "Device.settings", "kind": "class", "doc": "<p>Container for settings traits in a Device. These settings\n            are stored only on the host; setting or getting these values do not\n            trigger live updates (or any communication) with the device. These\n            define connection addressing information, communication settings,\n            and options that only apply to implementing python support for the\n            device.</p>\n\n<pre><code>        The device uses this container to define the keyword options supported\n        by its __init__ function. These are applied when you instantiate the device.\n        After you instantiate the device, you can still change the setting with::\n\n            Device.settings.resource = 'insert-your-address-string-here'\n</code></pre>\n\n<p>trait attributes:</p>\n\n<ul>\n<li><p><code>concurrency_support</code>: <code>Bool</code></p></li>\n<li><p><code>resource</code>: <code>Unicode</code></p></li>\n</ul>\n", "bases": "HasSettingsTraits"}, {"fullname": "asmg_workflow.utils.Device.settings.resource", "modulename": "asmg_workflow.utils", "qualname": "Device.settings.resource", "kind": "variable", "doc": "<p>Unicode()</p>\n\n<p>the data needed to make a connection to a device. its type and format are determined by the subclass implementationthe data needed to make a connection to a device. its type and format are determined by the subclass implementation</p>\n"}, {"fullname": "asmg_workflow.utils.Device.settings.concurrency_support", "modulename": "asmg_workflow.utils", "qualname": "Device.settings.concurrency_support", "kind": "variable", "doc": "<p>Bool()</p>\n\n<p>whether this <code>Device</code> implementation supports threadingwhether this <code>Device</code> implementation supports threading</p>\n"}, {"fullname": "asmg_workflow.utils.Device.state", "modulename": "asmg_workflow.utils", "qualname": "Device.state", "kind": "class", "doc": "<p>Container for state traits in a Device. Getting or setting state traits\n            triggers live updates: communication with the device to get or set the\n            value on the Device. Therefore, getting or setting state traits\n            needs the device to be connected.</p>\n\n<pre><code>        To set a state value inside the device, use normal python assigment::\n\n            device.state.parameter = value\n\n        To get a state value from the device, you can also use it as a normal python variable::\n\n            variable = device.state.parameter + 1\n</code></pre>\n\n<p>trait attributes:</p>\n\n<ul>\n<li><code>connected</code>: <code>Bool</code></li>\n</ul>\n", "bases": "HasStateTraits"}, {"fullname": "asmg_workflow.utils.Device.state.connected", "modulename": "asmg_workflow.utils", "qualname": "Device.state.connected", "kind": "variable", "doc": "<p>Bool()</p>\n\n<p>whether the <code>Device</code> instance is connectedwhether the <code>Device</code> instance is connected</p>\n"}, {"fullname": "asmg_workflow.utils.Device.backend", "modulename": "asmg_workflow.utils", "qualname": "Device.backend", "kind": "variable", "doc": "<p>.. attribute::state is the backend that controls communication with the device.\nit is to be set in <code>connect</code> and <code>disconnect</code> by the subclass that implements the backend.</p>\n", "default_value": "DisconnectedBackend()"}, {"fullname": "asmg_workflow.utils.Device.connect", "modulename": "asmg_workflow.utils", "qualname": "Device.connect", "kind": "function", "doc": "<p>Backend implementations overload this to open a backend\nconnection to the resource.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "asmg_workflow.utils.Device.disconnect", "modulename": "asmg_workflow.utils", "qualname": "Device.disconnect", "kind": "function", "doc": "<p>Backend implementations must overload this to disconnect an\nexisting connection to the resource encapsulated in the object.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "asmg_workflow.utils.Device.logger", "modulename": "asmg_workflow.utils", "qualname": "Device.logger", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "asmg_workflow.utils.list_devices", "modulename": "asmg_workflow.utils", "qualname": "list_devices", "kind": "function", "doc": "<p>Look for Device instances, and their names, in the calling\ncode context (depth == 1) or its callers (if depth in (2,3,...)).\nChecks locals() in that context first.\nIf no Device instances are found there, search the first\nargument of the first function argument, in case this is\na method in a class.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">depth</span><span class=\"o\">=</span><span class=\"mi\">1</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "asmg_workflow.utils.logger", "modulename": "asmg_workflow.utils", "qualname": "logger", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Logger labbench (WARNING)&gt;"}, {"fullname": "asmg_workflow.utils.CommandNotImplementedError", "modulename": "asmg_workflow.utils", "qualname": "CommandNotImplementedError", "kind": "class", "doc": "<p>Method or function hasn't been implemented yet.</p>\n", "bases": "builtins.NotImplementedError"}, {"fullname": "asmg_workflow.workflows", "modulename": "asmg_workflow.workflows", "kind": "module", "doc": "<p>workflows == a module that allows a series of tasks to be organized as a workflow. Workflows are have a start task,\na series of tasks with or without dependencies, and a stop task.</p>\n"}, {"fullname": "asmg_workflow.workflows.WorkflowSerializer", "modulename": "asmg_workflow.workflows", "qualname": "WorkflowSerializer", "kind": "class", "doc": "<p>Saves the workflow to disk or to a database</p>\n"}, {"fullname": "asmg_workflow.workflows.Workflow", "modulename": "asmg_workflow.workflows", "qualname": "Workflow", "kind": "class", "doc": "<p>Workflow == a class that organizes Tasks based on their dependencies. First create a set of tasks\nand then add them to the workflow with workflow.add_task(Task). workflow.execute() then runs all of the tasks.</p>\n", "bases": "asmg_workflow.tasks.Task"}, {"fullname": "asmg_workflow.workflows.Workflow.__init__", "modulename": "asmg_workflow.workflows", "qualname": "Workflow.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">**</span><span class=\"n\">options</span></span>)</span>"}, {"fullname": "asmg_workflow.workflows.Workflow.task_options", "modulename": "asmg_workflow.workflows", "qualname": "Workflow.task_options", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "asmg_workflow.workflows.Workflow.tasks", "modulename": "asmg_workflow.workflows", "qualname": "Workflow.tasks", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "asmg_workflow.workflows.Workflow.schedule", "modulename": "asmg_workflow.workflows", "qualname": "Workflow.schedule", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "asmg_workflow.workflows.Workflow.graph", "modulename": "asmg_workflow.workflows", "qualname": "Workflow.graph", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "asmg_workflow.workflows.Workflow.add_start_task", "modulename": "asmg_workflow.workflows", "qualname": "Workflow.add_start_task", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">task</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "asmg_workflow.workflows.Workflow.add_stop_task", "modulename": "asmg_workflow.workflows", "qualname": "Workflow.add_stop_task", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">task</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "asmg_workflow.workflows.Workflow.add_task", "modulename": "asmg_workflow.workflows", "qualname": "Workflow.add_task", "kind": "function", "doc": "<p>Adds a task to the self.tasks attribute</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">task</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "asmg_workflow.workflows.Workflow.check_time", "modulename": "asmg_workflow.workflows", "qualname": "Workflow.check_time", "kind": "function", "doc": "<p>Returns the current time for the workflow process and sets self.time</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "asmg_workflow.workflows.Workflow.reset_workflow", "modulename": "asmg_workflow.workflows", "qualname": "Workflow.reset_workflow", "kind": "function", "doc": "<p>Resets all of the tasks to task.started = False and task.completed = False</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "asmg_workflow.workflows.Workflow.arrange_tasks", "modulename": "asmg_workflow.workflows", "qualname": "Workflow.arrange_tasks", "kind": "function", "doc": "<p>Makes the schedule for the workflow</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "asmg_workflow.workflows.Workflow.execute", "modulename": "asmg_workflow.workflows", "qualname": "Workflow.execute", "kind": "function", "doc": "<p>Runs the workflow</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">exit_condition</span><span class=\"o\">=</span><span class=\"s1\">&#39;concurrently&#39;</span>, </span><span class=\"param\"><span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "asmg_workflow.workflows.Workflow.restart", "modulename": "asmg_workflow.workflows", "qualname": "Workflow.restart", "kind": "function", "doc": "<p>Restarts a partially executed workflow, does not reset tasks, for that use workflow.reset()</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "asmg_workflow.workflows.Workflow.on_error", "modulename": "asmg_workflow.workflows", "qualname": "Workflow.on_error", "kind": "function", "doc": "<p>Function that executes on an error in the execution of the task</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">exception</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "asmg_workflow.workflows.Workflow.show", "modulename": "asmg_workflow.workflows", "qualname": "Workflow.show", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">display</span><span class=\"o\">=</span><span class=\"s1\">&#39;slot&#39;</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">options</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "asmg_workflow.workflows.test_Workflow", "modulename": "asmg_workflow.workflows", "qualname": "test_Workflow", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "asmg_workflow.workflows.test_adding_tasks", "modulename": "asmg_workflow.workflows", "qualname": "test_adding_tasks", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}];

    // mirrored in build-search-index.js (part 1)
    // Also split on html tags. this is a cheap heuristic, but good enough.
    elasticlunr.tokenizer.setSeperator(/[\s\-.;&_'"=,()]+|<[^>]*>/);

    let searchIndex;
    if (docs._isPrebuiltIndex) {
        console.info("using precompiled search index");
        searchIndex = elasticlunr.Index.load(docs);
    } else {
        console.time("building search index");
        // mirrored in build-search-index.js (part 2)
        searchIndex = elasticlunr(function () {
            this.pipeline.remove(elasticlunr.stemmer);
            this.pipeline.remove(elasticlunr.stopWordFilter);
            this.addField("qualname");
            this.addField("fullname");
            this.addField("annotation");
            this.addField("default_value");
            this.addField("signature");
            this.addField("bases");
            this.addField("doc");
            this.setRef("fullname");
        });
        for (let doc of docs) {
            searchIndex.addDoc(doc);
        }
        console.timeEnd("building search index");
    }

    return (term) => searchIndex.search(term, {
        fields: {
            qualname: {boost: 4},
            fullname: {boost: 2},
            annotation: {boost: 2},
            default_value: {boost: 2},
            signature: {boost: 2},
            bases: {boost: 2},
            doc: {boost: 1},
        },
        expand: true
    });
})();